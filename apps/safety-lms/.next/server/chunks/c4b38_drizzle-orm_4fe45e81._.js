module.exports=[54850,16256,e=>{"use strict";e.s(["ColumnAliasProxyHandler",()=>s,"RelationTableAliasProxyHandler",()=>o,"TableAliasProxyHandler",()=>l,"aliasedRelation",()=>u,"aliasedTable",()=>c,"aliasedTableColumn",()=>m,"mapColumnsInAliasedSQLToAlias",()=>d,"mapColumnsInSQLToAlias",()=>y],54850);var a=e.i(29325),i=e.i(54892),r=e.i(63519),n=e.i(66634),t=e.i(90990);class s{constructor(e){this.table=e}static [i.entityKind]="ColumnAliasProxyHandler";get(e,a){return"table"===a?this.table:e[a]}}class l{constructor(e,a){this.alias=e,this.replaceOriginalName=a}static [i.entityKind]="TableAliasProxyHandler";get(e,r){if(r===n.Table.Symbol.IsAlias)return!0;if(r===n.Table.Symbol.Name||this.replaceOriginalName&&r===n.Table.Symbol.OriginalName)return this.alias;if(r===t.ViewBaseConfig)return{...e[t.ViewBaseConfig],name:this.alias,isAlias:!0};if(r===n.Table.Symbol.Columns){let a=e[n.Table.Symbol.Columns];if(!a)return a;let i={};return Object.keys(a).map(r=>{i[r]=new Proxy(a[r],new s(new Proxy(e,this)))}),i}let l=e[r];return(0,i.is)(l,a.Column)?new Proxy(l,new s(new Proxy(e,this))):l}}class o{constructor(e){this.alias=e}static [i.entityKind]="RelationTableAliasProxyHandler";get(e,a){return"sourceTable"===a?c(e.sourceTable,this.alias):e[a]}}function c(e,a){return new Proxy(e,new l(a,!1))}function u(e,a){return new Proxy(e,new o(a))}function m(e,a){return new Proxy(e,new s(new Proxy(e.table,new l(a,!1))))}function d(e,a){return new r.SQL.Aliased(y(e.sql,a),e.fieldAlias)}function y(e,n){return r.sql.join(e.queryChunks.map(e=>(0,i.is)(e,a.Column)?m(e,n):(0,i.is)(e,r.SQL)?y(e,n):(0,i.is)(e,r.SQL.Aliased)?d(e,n):e))}e.s(["DrizzleError",()=>g,"DrizzleQueryError",()=>p,"TransactionRollbackError",()=>b],16256);class g extends Error{static [i.entityKind]="DrizzleError";constructor({message:e,cause:a}){super(e),this.name="DrizzleError",this.cause=a}}class p extends Error{constructor(e,a,i){super(`Failed query: ${e}
params: ${a}`),this.query=e,this.params=a,this.cause=i,Error.captureStackTrace(this,p),i&&(this.cause=i)}}class b extends g{static [i.entityKind]="TransactionRollbackError";constructor(){super({message:"Rollback"})}}},41013,69376,e=>{"use strict";e.s(["ConsoleLogWriter",()=>i,"DefaultLogger",()=>r,"NoopLogger",()=>n],41013);var a=e.i(54892);class i{static [a.entityKind]="ConsoleLogWriter";write(e){console.log(e)}}class r{static [a.entityKind]="DefaultLogger";writer;constructor(e){this.writer=e?.writer??new i}logQuery(e,a){let i=a.map(e=>{try{return JSON.stringify(e)}catch{return String(e)}}),r=i.length?` -- params: [${i.join(", ")}]`:"";this.writer.write(`Query: ${e}${r}`)}}class n{static [a.entityKind]="NoopLogger";logQuery(){}}e.s(["QueryPromise",()=>t],69376);class t{static [a.entityKind]="QueryPromise";[Symbol.toStringTag]="QueryPromise";catch(e){return this.then(void 0,e)}finally(e){return this.then(a=>(e?.(),a),a=>{throw e?.(),a})}then(e,a){return this.execute().then(e,a)}}},24761,e=>{"use strict";e.s(["BaseName",()=>q.BaseName,"Column",()=>r.Column,"ColumnAliasProxyHandler",()=>a.ColumnAliasProxyHandler,"ColumnBuilder",()=>i.ColumnBuilder,"Columns",()=>q.Columns,"ConsoleLogWriter",()=>s.ConsoleLogWriter,"DefaultLogger",()=>s.DefaultLogger,"DrizzleError",()=>t.DrizzleError,"DrizzleQueryError",()=>t.DrizzleQueryError,"ExtraConfigBuilder",()=>q.ExtraConfigBuilder,"ExtraConfigColumns",()=>q.ExtraConfigColumns,"FakePrimitiveParam",()=>T.FakePrimitiveParam,"IsAlias",()=>q.IsAlias,"Many",()=>o.Many,"Name",()=>T.Name,"NoopLogger",()=>s.NoopLogger,"One",()=>o.One,"OriginalName",()=>q.OriginalName,"Param",()=>T.Param,"Placeholder",()=>T.Placeholder,"QueryPromise",()=>l.QueryPromise,"Relation",()=>o.Relation,"RelationTableAliasProxyHandler",()=>a.RelationTableAliasProxyHandler,"Relations",()=>o.Relations,"SQL",()=>T.SQL,"Schema",()=>q.Schema,"StringChunk",()=>T.StringChunk,"Subquery",()=>k.Subquery,"Table",()=>q.Table,"TableAliasProxyHandler",()=>a.TableAliasProxyHandler,"TransactionRollbackError",()=>t.TransactionRollbackError,"View",()=>T.View,"ViewBaseConfig",()=>$.ViewBaseConfig,"WithSubquery",()=>k.WithSubquery,"aliasedRelation",()=>a.aliasedRelation,"aliasedTable",()=>a.aliasedTable,"aliasedTableColumn",()=>a.aliasedTableColumn,"and",()=>c.and,"applyMixins",()=>L.applyMixins,"arrayContained",()=>c.arrayContained,"arrayContains",()=>c.arrayContains,"arrayOverlaps",()=>c.arrayOverlaps,"asc",()=>u.asc,"avg",()=>g,"avgDistinct",()=>p,"between",()=>c.between,"bindIfParam",()=>c.bindIfParam,"cosineDistance",()=>x,"count",()=>d,"countDistinct",()=>y,"createMany",()=>o.createMany,"createOne",()=>o.createOne,"createTableRelationsHelpers",()=>o.createTableRelationsHelpers,"desc",()=>u.desc,"entityKind",()=>n.entityKind,"eq",()=>c.eq,"exists",()=>c.exists,"extractTablesRelationalConfig",()=>o.extractTablesRelationalConfig,"fillPlaceholders",()=>T.fillPlaceholders,"getColumnNameAndConfig",()=>L.getColumnNameAndConfig,"getOperators",()=>o.getOperators,"getOrderByOperators",()=>o.getOrderByOperators,"getTableColumns",()=>L.getTableColumns,"getTableLikeName",()=>L.getTableLikeName,"getTableName",()=>q.getTableName,"getTableUniqueName",()=>q.getTableUniqueName,"getViewName",()=>T.getViewName,"getViewSelectedFields",()=>L.getViewSelectedFields,"gt",()=>c.gt,"gte",()=>c.gte,"hammingDistance",()=>S,"hasOwnEntityKind",()=>n.hasOwnEntityKind,"haveSameKeys",()=>L.haveSameKeys,"ilike",()=>c.ilike,"inArray",()=>c.inArray,"innerProduct",()=>D,"is",()=>n.is,"isConfig",()=>L.isConfig,"isDriverValueEncoder",()=>T.isDriverValueEncoder,"isNotNull",()=>c.isNotNull,"isNull",()=>c.isNull,"isSQLWrapper",()=>T.isSQLWrapper,"isTable",()=>q.isTable,"isView",()=>T.isView,"jaccardDistance",()=>N,"l1Distance",()=>A,"l2Distance",()=>P,"like",()=>c.like,"lt",()=>c.lt,"lte",()=>c.lte,"mapColumnsInAliasedSQLToAlias",()=>a.mapColumnsInAliasedSQLToAlias,"mapColumnsInSQLToAlias",()=>a.mapColumnsInSQLToAlias,"mapRelationalRow",()=>o.mapRelationalRow,"mapResultRow",()=>L.mapResultRow,"mapUpdateSet",()=>L.mapUpdateSet,"max",()=>C,"min",()=>w,"name",()=>T.name,"ne",()=>c.ne,"noopDecoder",()=>T.noopDecoder,"noopEncoder",()=>T.noopEncoder,"noopMapper",()=>T.noopMapper,"normalizeRelation",()=>o.normalizeRelation,"not",()=>c.not,"notBetween",()=>c.notBetween,"notExists",()=>c.notExists,"notIlike",()=>c.notIlike,"notInArray",()=>c.notInArray,"notLike",()=>c.notLike,"or",()=>c.or,"orderSelectedFields",()=>L.orderSelectedFields,"param",()=>T.param,"placeholder",()=>T.placeholder,"relations",()=>o.relations,"sql",()=>T.sql,"sum",()=>b,"sumDistinct",()=>h,"textDecoder",()=>L.textDecoder],24761),e.s([],39220),e.i(39220);var a=e.i(54850),i=e.i(26427),r=e.i(29325),n=e.i(54892),t=e.i(16256),s=e.i(41013);e.s([],12256),e.i(12256);var l=e.i(69376),o=e.i(29738);e.s(["FakePrimitiveParam",()=>T.FakePrimitiveParam,"Name",()=>T.Name,"Param",()=>T.Param,"Placeholder",()=>T.Placeholder,"SQL",()=>T.SQL,"StringChunk",()=>T.StringChunk,"View",()=>T.View,"and",()=>c.and,"arrayContained",()=>c.arrayContained,"arrayContains",()=>c.arrayContains,"arrayOverlaps",()=>c.arrayOverlaps,"asc",()=>u.asc,"avg",()=>g,"avgDistinct",()=>p,"between",()=>c.between,"bindIfParam",()=>c.bindIfParam,"cosineDistance",()=>x,"count",()=>d,"countDistinct",()=>y,"desc",()=>u.desc,"eq",()=>c.eq,"exists",()=>c.exists,"fillPlaceholders",()=>T.fillPlaceholders,"getViewName",()=>T.getViewName,"gt",()=>c.gt,"gte",()=>c.gte,"hammingDistance",()=>S,"ilike",()=>c.ilike,"inArray",()=>c.inArray,"innerProduct",()=>D,"isDriverValueEncoder",()=>T.isDriverValueEncoder,"isNotNull",()=>c.isNotNull,"isNull",()=>c.isNull,"isSQLWrapper",()=>T.isSQLWrapper,"isView",()=>T.isView,"jaccardDistance",()=>N,"l1Distance",()=>A,"l2Distance",()=>P,"like",()=>c.like,"lt",()=>c.lt,"lte",()=>c.lte,"max",()=>C,"min",()=>w,"name",()=>T.name,"ne",()=>c.ne,"noopDecoder",()=>T.noopDecoder,"noopEncoder",()=>T.noopEncoder,"noopMapper",()=>T.noopMapper,"not",()=>c.not,"notBetween",()=>c.notBetween,"notExists",()=>c.notExists,"notIlike",()=>c.notIlike,"notInArray",()=>c.notInArray,"notLike",()=>c.notLike,"or",()=>c.or,"param",()=>T.param,"placeholder",()=>T.placeholder,"sql",()=>T.sql,"sum",()=>b,"sumDistinct",()=>h],74398),e.s([],10631),e.i(10631),e.s(["and",()=>c.and,"arrayContained",()=>c.arrayContained,"arrayContains",()=>c.arrayContains,"arrayOverlaps",()=>c.arrayOverlaps,"asc",()=>u.asc,"between",()=>c.between,"bindIfParam",()=>c.bindIfParam,"desc",()=>u.desc,"eq",()=>c.eq,"exists",()=>c.exists,"gt",()=>c.gt,"gte",()=>c.gte,"ilike",()=>c.ilike,"inArray",()=>c.inArray,"isNotNull",()=>c.isNotNull,"isNull",()=>c.isNull,"like",()=>c.like,"lt",()=>c.lt,"lte",()=>c.lte,"ne",()=>c.ne,"not",()=>c.not,"notBetween",()=>c.notBetween,"notExists",()=>c.notExists,"notIlike",()=>c.notIlike,"notInArray",()=>c.notInArray,"notLike",()=>c.notLike,"or",()=>c.or],14433),e.s([],27134),e.i(27134);var c=e.i(8079),u=e.i(56412);e.i(14433),e.s(["avg",()=>g,"avgDistinct",()=>p,"cosineDistance",()=>x,"count",()=>d,"countDistinct",()=>y,"hammingDistance",()=>S,"innerProduct",()=>D,"jaccardDistance",()=>N,"l1Distance",()=>A,"l2Distance",()=>P,"max",()=>C,"min",()=>w,"sum",()=>b,"sumDistinct",()=>h],82534),e.s([],78633),e.i(78633),e.s(["avg",()=>g,"avgDistinct",()=>p,"count",()=>d,"countDistinct",()=>y,"max",()=>C,"min",()=>w,"sum",()=>b,"sumDistinct",()=>h],7412);var m=e.i(63519);function d(e){return m.sql`count(${e||m.sql.raw("*")})`.mapWith(Number)}function y(e){return m.sql`count(distinct ${e})`.mapWith(Number)}function g(e){return m.sql`avg(${e})`.mapWith(String)}function p(e){return m.sql`avg(distinct ${e})`.mapWith(String)}function b(e){return m.sql`sum(${e})`.mapWith(String)}function h(e){return m.sql`sum(distinct ${e})`.mapWith(String)}function C(e){return m.sql`max(${e})`.mapWith((0,n.is)(e,r.Column)?e:String)}function w(e){return m.sql`min(${e})`.mapWith((0,n.is)(e,r.Column)?e:String)}function f(e){return JSON.stringify(e)}function P(e,a){return Array.isArray(a)?m.sql`${e} <-> ${f(a)}`:m.sql`${e} <-> ${a}`}function A(e,a){return Array.isArray(a)?m.sql`${e} <+> ${f(a)}`:m.sql`${e} <+> ${a}`}function D(e,a){return Array.isArray(a)?m.sql`${e} <#> ${f(a)}`:m.sql`${e} <#> ${a}`}function x(e,a){return Array.isArray(a)?m.sql`${e} <=> ${f(a)}`:m.sql`${e} <=> ${a}`}function S(e,a){return Array.isArray(a)?m.sql`${e} <~> ${f(a)}`:m.sql`${e} <~> ${a}`}function N(e,a){return Array.isArray(a)?m.sql`${e} <%> ${f(a)}`:m.sql`${e} <%> ${a}`}e.i(7412),e.s(["cosineDistance",()=>x,"hammingDistance",()=>S,"innerProduct",()=>D,"jaccardDistance",()=>N,"l1Distance",()=>A,"l2Distance",()=>P],17765),e.i(17765),e.i(82534);var T=m;e.i(74398);var k=e.i(23951),q=e.i(66634),L=e.i(45257),$=e.i(90990)}];

//# sourceMappingURL=c4b38_drizzle-orm_4fe45e81._.js.map