{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/supabase/server.ts"],"sourcesContent":["import { createServerClient, type CookieOptions } from \"@supabase/ssr\";\nimport { cookies } from \"next/headers\";\nimport { cache } from \"react\";\n\nexport const createClient = cache(async () => {\n  const cookieStore = await cookies();\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return cookieStore.get(name)?.value;\n        },\n        set(name: string, value: string, options: CookieOptions) {\n          try {\n            cookieStore.set({ name, value, ...options });\n          } catch (error) {\n            // The `cookies().set()` method can only be called from a Server Component or Server Action.\n            // This error can be ignored if you are running tests that don't have a Server Component.\n          }\n        },\n        remove(name: string, options: CookieOptions) {\n          try {\n            cookieStore.set({ name, value: \"\", ...options });\n          } catch (error) {\n            // The `cookies().set()` method can only be called from a Server Component or Server Action.\n            // This error can be ignored if you are running tests that don't have a Server Component.\n          }\n        },\n      },\n    }\n  );\n});\n\n// Legacy export for backward compatibility\nexport const createServerSupabaseClient = createClient;\n\n// Server auth helper for API routes\nexport const serverAuth = {\n  async getCurrentUser() {\n    const supabase = await createClient();\n    const { data: { user }, error } = await supabase.auth.getUser();\n\n    if (error || !user) {\n      return { user: null, profile: null };\n    }\n\n    // Get user profile from profiles table\n    const { data: profile, error: profileError } = await supabase\n      .from(\"profiles\")\n      .select(\"*\")\n      .eq(\"auth_user_id\", user.id)\n      .single();\n\n    if (profileError) {\n      console.error(\"Error fetching user profile:\", profileError);\n      return { user, profile: null };\n    }\n\n    return { user, profile };\n  }\n};\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AACA;AACA;;;;AAEO,MAAM,eAAe,IAAA,+UAAK,EAAC;IAChC,MAAM,cAAc,MAAM,IAAA,2QAAO;IAEjC,OAAO,IAAA,8SAAkB,sUAGvB;QACE,SAAS;YACP,KAAI,IAAY;gBACd,OAAO,YAAY,GAAG,CAAC,OAAO;YAChC;YACA,KAAI,IAAY,EAAE,KAAa,EAAE,OAAsB;gBACrD,IAAI;oBACF,YAAY,GAAG,CAAC;wBAAE;wBAAM;wBAAO,GAAG,OAAO;oBAAC;gBAC5C,EAAE,OAAO,OAAO;gBACd,4FAA4F;gBAC5F,yFAAyF;gBAC3F;YACF;YACA,QAAO,IAAY,EAAE,OAAsB;gBACzC,IAAI;oBACF,YAAY,GAAG,CAAC;wBAAE;wBAAM,OAAO;wBAAI,GAAG,OAAO;oBAAC;gBAChD,EAAE,OAAO,OAAO;gBACd,4FAA4F;gBAC5F,yFAAyF;gBAC3F;YACF;QACF;IACF;AAEJ;AAGO,MAAM,6BAA6B;AAGnC,MAAM,aAAa;IACxB,MAAM;QACJ,MAAM,WAAW,MAAM;QACvB,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;QAE7D,IAAI,SAAS,CAAC,MAAM;YAClB,OAAO;gBAAE,MAAM;gBAAM,SAAS;YAAK;QACrC;QAEA,uCAAuC;QACvC,MAAM,EAAE,MAAM,OAAO,EAAE,OAAO,YAAY,EAAE,GAAG,MAAM,SAClD,IAAI,CAAC,YACL,MAAM,CAAC,KACP,EAAE,CAAC,gBAAgB,KAAK,EAAE,EAC1B,MAAM;QAET,IAAI,cAAc;YAChB,QAAQ,KAAK,CAAC,gCAAgC;YAC9C,OAAO;gBAAE;gBAAM,SAAS;YAAK;QAC/B;QAEA,OAAO;YAAE;YAAM;QAAQ;IACzB;AACF","debugId":null}},
    {"offset": {"line": 206, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/enrollments.ts"],"sourcesContent":["import { pgTable, uuid, timestamp, pgEnum } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n\n// Enums\nexport const enrollmentStatusEnum = pgEnum(\"enrollment_status\", [\n  \"enrolled\",\n  \"in_progress\",\n  \"completed\",\n]);\n\n// Enrollments table - tracks user course enrollments\nexport const enrollments = pgTable(\"enrollments\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => profiles.id),\n  courseId: uuid(\"course_id\")\n    .notNull()\n    .references(() => courses.id),\n  plantId: uuid(\"plant_id\")\n    .notNull()\n    .references(() => plants.id),\n  status: enrollmentStatusEnum(\"status\").default(\"enrolled\").notNull(),\n  enrolledAt: timestamp(\"enrolled_at\").defaultNow().notNull(),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const enrollmentsRelations = relations(enrollments, ({ one }) => ({\n  user: one(profiles, {\n    fields: [enrollments.userId],\n    references: [profiles.id],\n  }),\n  course: one(courses, {\n    fields: [enrollments.courseId],\n    references: [courses.id],\n  }),\n  plant: one(plants, {\n    fields: [enrollments.plantId],\n    references: [plants.id],\n  }),\n}));\n\n// Type exports\nexport type Enrollment = typeof enrollments.$inferSelect;\nexport type NewEnrollment = typeof enrollments.$inferInsert;\n\n// Import other tables for relations (circular import handling)\nimport { profiles } from \"./profiles\";\nimport { courses } from \"./courses\";\nimport { plants } from \"./plants\";\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AAgDA,+DAA+D;AAC/D;AACA;AACA;;;AAhDO,MAAM,uBAAuB,IAAA,+PAAM,EAAC,qBAAqB;IAC9D;IACA;IACA;CACD;AAGM,MAAM,cAAc,IAAA,sPAAO,EAAC,eAAe;IAChD,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,6PAAI,EAAC,WACV,OAAO,GACP,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IAC/B,UAAU,IAAA,6PAAI,EAAC,aACZ,OAAO,GACP,UAAU,CAAC,IAAM,2KAAO,CAAC,EAAE;IAC9B,SAAS,IAAA,6PAAI,EAAC,YACX,OAAO,GACP,UAAU,CAAC,IAAM,yKAAM,CAAC,EAAE;IAC7B,QAAQ,qBAAqB,UAAU,OAAO,CAAC,YAAY,OAAO;IAClE,YAAY,IAAA,uQAAS,EAAC,eAAe,UAAU,GAAG,OAAO;IACzD,aAAa,IAAA,uQAAS,EAAC;IACvB,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,uBAAuB,IAAA,8OAAS,EAAC,aAAa,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACvE,MAAM,IAAI,6KAAQ,EAAE;YAClB,QAAQ;gBAAC,YAAY,MAAM;aAAC;YAC5B,YAAY;gBAAC,6KAAQ,CAAC,EAAE;aAAC;QAC3B;QACA,QAAQ,IAAI,2KAAO,EAAE;YACnB,QAAQ;gBAAC,YAAY,QAAQ;aAAC;YAC9B,YAAY;gBAAC,2KAAO,CAAC,EAAE;aAAC;QAC1B;QACA,OAAO,IAAI,yKAAM,EAAE;YACjB,QAAQ;gBAAC,YAAY,OAAO;aAAC;YAC7B,YAAY;gBAAC,yKAAM,CAAC,EAAE;aAAC;QACzB;IACF,CAAC","debugId":null}},
    {"offset": {"line": 274, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/progress.ts"],"sourcesContent":["import { pgTable, uuid, text, timestamp, integer } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n\n// Progress table - tracks user progress through courses\nexport const progress = pgTable(\"progress\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => profiles.id),\n  courseId: uuid(\"course_id\")\n    .notNull()\n    .references(() => courses.id),\n  plantId: uuid(\"plant_id\")\n    .notNull()\n    .references(() => plants.id),\n  progressPercent: integer(\"progress_percent\").default(0).notNull(),\n  currentSection: text(\"current_section\"),\n  lastActiveAt: timestamp(\"last_active_at\").defaultNow().notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const progressRelations = relations(progress, ({ one }) => ({\n  user: one(profiles, {\n    fields: [progress.userId],\n    references: [profiles.id],\n  }),\n  course: one(courses, {\n    fields: [progress.courseId],\n    references: [courses.id],\n  }),\n  plant: one(plants, {\n    fields: [progress.plantId],\n    references: [plants.id],\n  }),\n}));\n\n// Type exports\nexport type Progress = typeof progress.$inferSelect;\nexport type NewProgress = typeof progress.$inferInsert;\n\n// Import other tables for relations (circular import handling)\nimport { profiles } from \"./profiles\";\nimport { courses } from \"./courses\";\nimport { plants } from \"./plants\";\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAyCA,+DAA+D;AAC/D;AACA;AACA;;;AAzCO,MAAM,WAAW,IAAA,sPAAO,EAAC,YAAY;IAC1C,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,6PAAI,EAAC,WACV,OAAO,GACP,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IAC/B,UAAU,IAAA,6PAAI,EAAC,aACZ,OAAO,GACP,UAAU,CAAC,IAAM,2KAAO,CAAC,EAAE;IAC9B,SAAS,IAAA,6PAAI,EAAC,YACX,OAAO,GACP,UAAU,CAAC,IAAM,yKAAM,CAAC,EAAE;IAC7B,iBAAiB,IAAA,mQAAO,EAAC,oBAAoB,OAAO,CAAC,GAAG,OAAO;IAC/D,gBAAgB,IAAA,6PAAI,EAAC;IACrB,cAAc,IAAA,uQAAS,EAAC,kBAAkB,UAAU,GAAG,OAAO;IAC9D,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,oBAAoB,IAAA,8OAAS,EAAC,UAAU,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACjE,MAAM,IAAI,6KAAQ,EAAE;YAClB,QAAQ;gBAAC,SAAS,MAAM;aAAC;YACzB,YAAY;gBAAC,6KAAQ,CAAC,EAAE;aAAC;QAC3B;QACA,QAAQ,IAAI,2KAAO,EAAE;YACnB,QAAQ;gBAAC,SAAS,QAAQ;aAAC;YAC3B,YAAY;gBAAC,2KAAO,CAAC,EAAE;aAAC;QAC1B;QACA,OAAO,IAAI,yKAAM,EAAE;YACjB,QAAQ;gBAAC,SAAS,OAAO;aAAC;YAC1B,YAAY;gBAAC,yKAAM,CAAC,EAAE;aAAC;QACzB;IACF,CAAC","debugId":null}},
    {"offset": {"line": 336, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/activity-events.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  jsonb,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n\n// Enums\nexport const eventTypeEnum = pgEnum(\"event_type\", [\n  \"view_section\",\n  \"start_course\",\n  \"complete_course\",\n]);\n\n// Activity Events table - tracks user activity within courses\nexport const activityEvents = pgTable(\"activity_events\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => profiles.id),\n  courseId: uuid(\"course_id\")\n    .notNull()\n    .references(() => courses.id),\n  plantId: uuid(\"plant_id\")\n    .notNull()\n    .references(() => plants.id),\n  eventType: eventTypeEnum(\"event_type\").notNull(),\n  meta: jsonb(\"meta\"),\n  occurredAt: timestamp(\"occurred_at\").defaultNow().notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const activityEventsRelations = relations(activityEvents, ({ one }) => ({\n  user: one(profiles, {\n    fields: [activityEvents.userId],\n    references: [profiles.id],\n  }),\n  course: one(courses, {\n    fields: [activityEvents.courseId],\n    references: [courses.id],\n  }),\n  plant: one(plants, {\n    fields: [activityEvents.plantId],\n    references: [plants.id],\n  }),\n}));\n\n// Type exports\nexport type ActivityEvent = typeof activityEvents.$inferSelect;\nexport type NewActivityEvent = typeof activityEvents.$inferInsert;\n\n// Import other tables for relations (circular import handling)\nimport { profiles } from \"./profiles\";\nimport { courses } from \"./courses\";\nimport { plants } from \"./plants\";\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AA+CA,+DAA+D;AAC/D;AACA;AACA;;;AA/CO,MAAM,gBAAgB,IAAA,+PAAM,EAAC,cAAc;IAChD;IACA;IACA;CACD;AAGM,MAAM,iBAAiB,IAAA,sPAAO,EAAC,mBAAmB;IACvD,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,6PAAI,EAAC,WACV,OAAO,GACP,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IAC/B,UAAU,IAAA,6PAAI,EAAC,aACZ,OAAO,GACP,UAAU,CAAC,IAAM,2KAAO,CAAC,EAAE;IAC9B,SAAS,IAAA,6PAAI,EAAC,YACX,OAAO,GACP,UAAU,CAAC,IAAM,yKAAM,CAAC,EAAE;IAC7B,WAAW,cAAc,cAAc,OAAO;IAC9C,MAAM,IAAA,+PAAK,EAAC;IACZ,YAAY,IAAA,uQAAS,EAAC,eAAe,UAAU,GAAG,OAAO;IACzD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,0BAA0B,IAAA,8OAAS,EAAC,gBAAgB,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QAC7E,MAAM,IAAI,6KAAQ,EAAE;YAClB,QAAQ;gBAAC,eAAe,MAAM;aAAC;YAC/B,YAAY;gBAAC,6KAAQ,CAAC,EAAE;aAAC;QAC3B;QACA,QAAQ,IAAI,2KAAO,EAAE;YACnB,QAAQ;gBAAC,eAAe,QAAQ;aAAC;YACjC,YAAY;gBAAC,2KAAO,CAAC,EAAE;aAAC;QAC1B;QACA,OAAO,IAAI,yKAAM,EAAE;YACjB,QAAQ;gBAAC,eAAe,OAAO;aAAC;YAChC,YAAY;gBAAC,yKAAM,CAAC,EAAE;aAAC;QACzB;IACF,CAAC","debugId":null}},
    {"offset": {"line": 404, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/question-events.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  integer,\n  jsonb,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n\n// Question Events table - tracks user responses to quiz questions\nexport const questionEvents = pgTable(\"question_events\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => profiles.id),\n  courseId: uuid(\"course_id\")\n    .notNull()\n    .references(() => courses.id),\n  plantId: uuid(\"plant_id\")\n    .notNull()\n    .references(() => plants.id),\n  sectionKey: text(\"section_key\").notNull(),\n  questionKey: text(\"question_key\").notNull(),\n  isCorrect: boolean(\"is_correct\").notNull(),\n  attemptIndex: integer(\"attempt_index\").default(1).notNull(),\n  responseMeta: jsonb(\"response_meta\"),\n  answeredAt: timestamp(\"answered_at\").defaultNow().notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const questionEventsRelations = relations(questionEvents, ({ one }) => ({\n  user: one(profiles, {\n    fields: [questionEvents.userId],\n    references: [profiles.id],\n  }),\n  course: one(courses, {\n    fields: [questionEvents.courseId],\n    references: [courses.id],\n  }),\n  plant: one(plants, {\n    fields: [questionEvents.plantId],\n    references: [plants.id],\n  }),\n}));\n\n// Type exports\nexport type QuestionEvent = typeof questionEvents.$inferSelect;\nexport type NewQuestionEvent = typeof questionEvents.$inferInsert;\n\n// Import other tables for relations (circular import handling)\nimport { profiles } from \"./profiles\";\nimport { courses } from \"./courses\";\nimport { plants } from \"./plants\";\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AA2CA,+DAA+D;AAC/D;AACA;AACA;;;AA3CO,MAAM,iBAAiB,IAAA,sPAAO,EAAC,mBAAmB;IACvD,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,6PAAI,EAAC,WACV,OAAO,GACP,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IAC/B,UAAU,IAAA,6PAAI,EAAC,aACZ,OAAO,GACP,UAAU,CAAC,IAAM,2KAAO,CAAC,EAAE;IAC9B,SAAS,IAAA,6PAAI,EAAC,YACX,OAAO,GACP,UAAU,CAAC,IAAM,yKAAM,CAAC,EAAE;IAC7B,YAAY,IAAA,6PAAI,EAAC,eAAe,OAAO;IACvC,aAAa,IAAA,6PAAI,EAAC,gBAAgB,OAAO;IACzC,WAAW,IAAA,mQAAO,EAAC,cAAc,OAAO;IACxC,cAAc,IAAA,mQAAO,EAAC,iBAAiB,OAAO,CAAC,GAAG,OAAO;IACzD,cAAc,IAAA,+PAAK,EAAC;IACpB,YAAY,IAAA,uQAAS,EAAC,eAAe,UAAU,GAAG,OAAO;IACzD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,0BAA0B,IAAA,8OAAS,EAAC,gBAAgB,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QAC7E,MAAM,IAAI,6KAAQ,EAAE;YAClB,QAAQ;gBAAC,eAAe,MAAM;aAAC;YAC/B,YAAY;gBAAC,6KAAQ,CAAC,EAAE;aAAC;QAC3B;QACA,QAAQ,IAAI,2KAAO,EAAE;YACnB,QAAQ;gBAAC,eAAe,QAAQ;aAAC;YACjC,YAAY;gBAAC,2KAAO,CAAC,EAAE;aAAC;QAC1B;QACA,OAAO,IAAI,yKAAM,EAAE;YACjB,QAAQ;gBAAC,eAAe,OAAO;aAAC;YAChC,YAAY;gBAAC,yKAAM,CAAC,EAAE;aAAC;QACzB;IACF,CAAC","debugId":null}},
    {"offset": {"line": 470, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/courses.ts"],"sourcesContent":["import { pgTable, uuid, text, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n\n// Courses table - safety training courses\nexport const courses = pgTable(\"courses\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  slug: text(\"slug\").notNull().unique(),\n  title: text(\"title\").notNull(),\n  version: text(\"version\").default(\"1.0\").notNull(),\n  isPublished: boolean(\"is_published\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const coursesRelations = relations(courses, ({ many }) => ({\n  enrollments: many(enrollments),\n  progress: many(progress),\n  activityEvents: many(activityEvents),\n  questionEvents: many(questionEvents),\n}));\n\n// Type exports\nexport type Course = typeof courses.$inferSelect;\nexport type NewCourse = typeof courses.$inferInsert;\n\n// Import other tables for relations (circular import handling)\nimport { enrollments } from \"./enrollments\";\nimport { progress } from \"./progress\";\nimport { activityEvents } from \"./activity-events\";\nimport { questionEvents } from \"./question-events\";\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAyBA,+DAA+D;AAC/D;AACA;AACA;AACA;;;AA1BO,MAAM,UAAU,IAAA,sPAAO,EAAC,WAAW;IACxC,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,MAAM,IAAA,6PAAI,EAAC,QAAQ,OAAO,GAAG,MAAM;IACnC,OAAO,IAAA,6PAAI,EAAC,SAAS,OAAO;IAC5B,SAAS,IAAA,6PAAI,EAAC,WAAW,OAAO,CAAC,OAAO,OAAO;IAC/C,aAAa,IAAA,mQAAO,EAAC,gBAAgB,OAAO,CAAC,OAAO,OAAO;IAC3D,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,mBAAmB,IAAA,8OAAS,EAAC,SAAS,CAAC,EAAE,IAAI,EAAE,GAAK,CAAC;QAChE,aAAa,KAAK,mLAAW;QAC7B,UAAU,KAAK,6KAAQ;QACvB,gBAAgB,KAAK,6LAAc;QACnC,gBAAgB,KAAK,6LAAc;IACrC,CAAC","debugId":null}},
    {"offset": {"line": 512, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/admin-roles.ts"],"sourcesContent":["import { pgTable, uuid, text, timestamp, pgEnum } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n\n// Enums\nexport const adminRoleEnum = pgEnum(\"admin_role\", [\n  \"hr_admin\",\n  \"dev_admin\",\n  \"plant_manager\",\n]);\n\n// Admin Roles table - manages user administrative permissions\nexport const adminRoles = pgTable(\"admin_roles\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => profiles.id),\n  role: adminRoleEnum(\"role\").notNull(),\n  plantId: uuid(\"plant_id\").references(() => plants.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const adminRolesRelations = relations(adminRoles, ({ one }) => ({\n  user: one(profiles, {\n    fields: [adminRoles.userId],\n    references: [profiles.id],\n  }),\n  plant: one(plants, {\n    fields: [adminRoles.plantId],\n    references: [plants.id],\n  }),\n}));\n\n// Type exports\nexport type AdminRole = typeof adminRoles.$inferSelect;\nexport type NewAdminRole = typeof adminRoles.$inferInsert;\n\n// Import other tables for relations (circular import handling)\nimport { profiles } from \"./profiles\";\nimport { plants } from \"./plants\";\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AAqCA,+DAA+D;AAC/D;AACA;;;AApCO,MAAM,gBAAgB,IAAA,+PAAM,EAAC,cAAc;IAChD;IACA;IACA;CACD;AAGM,MAAM,aAAa,IAAA,sPAAO,EAAC,eAAe;IAC/C,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,6PAAI,EAAC,WACV,OAAO,GACP,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IAC/B,MAAM,cAAc,QAAQ,OAAO;IACnC,SAAS,IAAA,6PAAI,EAAC,YAAY,UAAU,CAAC,IAAM,yKAAM,CAAC,EAAE;IACpD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,sBAAsB,IAAA,8OAAS,EAAC,YAAY,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACrE,MAAM,IAAI,6KAAQ,EAAE;YAClB,QAAQ;gBAAC,WAAW,MAAM;aAAC;YAC3B,YAAY;gBAAC,6KAAQ,CAAC,EAAE;aAAC;QAC3B;QACA,OAAO,IAAI,yKAAM,EAAE;YACjB,QAAQ;gBAAC,WAAW,OAAO;aAAC;YAC5B,YAAY;gBAAC,yKAAM,CAAC,EAAE;aAAC;QACzB;IACF,CAAC","debugId":null}},
    {"offset": {"line": 567, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/plants.ts"],"sourcesContent":["import { pgTable, uuid, text, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n\n// Plants table - represents different plant/facility locations\nexport const plants = pgTable(\"plants\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  name: text(\"name\").notNull().unique(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const plantsRelations = relations(plants, ({ many }) => ({\n  profiles: many(profiles),\n  courses: many(courses),\n  enrollments: many(enrollments),\n  progress: many(progress),\n  activityEvents: many(activityEvents),\n  questionEvents: many(questionEvents),\n  adminRoles: many(adminRoles),\n}));\n\n// Type exports\nexport type Plant = typeof plants.$inferSelect;\nexport type NewPlant = typeof plants.$inferInsert;\n\n// Import other tables for relations (circular import handling)\nimport { profiles } from \"./profiles\";\nimport { courses } from \"./courses\";\nimport { enrollments } from \"./enrollments\";\nimport { progress } from \"./progress\";\nimport { activityEvents } from \"./activity-events\";\nimport { questionEvents } from \"./question-events\";\nimport { adminRoles } from \"./admin-roles\";\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA0BA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;;;AA9BO,MAAM,SAAS,IAAA,sPAAO,EAAC,UAAU;IACtC,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,MAAM,IAAA,6PAAI,EAAC,QAAQ,OAAO,GAAG,MAAM;IACnC,UAAU,IAAA,mQAAO,EAAC,aAAa,OAAO,CAAC,MAAM,OAAO;IACpD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,kBAAkB,IAAA,8OAAS,EAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,GAAK,CAAC;QAC9D,UAAU,KAAK,6KAAQ;QACvB,SAAS,KAAK,2KAAO;QACrB,aAAa,KAAK,mLAAW;QAC7B,UAAU,KAAK,6KAAQ;QACvB,gBAAgB,KAAK,6LAAc;QACnC,gBAAgB,KAAK,6LAAc;QACnC,YAAY,KAAK,qLAAU;IAC7B,CAAC","debugId":null}},
    {"offset": {"line": 616, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/profiles.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { plants } from \"./plants\";\n\n// Enums\nexport const userStatusEnum = pgEnum(\"user_status\", [\"active\", \"suspended\"]);\n\n// Profiles table - extends Supabase auth.users\nexport const profiles = pgTable(\"profiles\", {\n  id: uuid(\"id\").primaryKey(), // References auth.users.id\n  plantId: uuid(\"plant_id\")\n    .notNull()\n    .references(() => plants.id),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  jobTitle: text(\"job_title\"),\n  status: userStatusEnum(\"status\").default(\"active\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const profilesRelations = relations(profiles, ({ one, many }) => ({\n  plant: one(plants, {\n    fields: [profiles.plantId],\n    references: [plants.id],\n  }),\n}));\n\n// Type exports\nexport type Profile = typeof profiles.$inferSelect;\nexport type NewProfile = typeof profiles.$inferInsert;\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;;;;AAGO,MAAM,iBAAiB,IAAA,+PAAM,EAAC,eAAe;IAAC;IAAU;CAAY;AAGpE,MAAM,WAAW,IAAA,sPAAO,EAAC,YAAY;IAC1C,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU;IACzB,SAAS,IAAA,6PAAI,EAAC,YACX,OAAO,GACP,UAAU,CAAC,IAAM,yKAAM,CAAC,EAAE;IAC7B,WAAW,IAAA,6PAAI,EAAC,cAAc,OAAO;IACrC,UAAU,IAAA,6PAAI,EAAC,aAAa,OAAO;IACnC,OAAO,IAAA,6PAAI,EAAC,SAAS,OAAO;IAC5B,UAAU,IAAA,6PAAI,EAAC;IACf,QAAQ,eAAe,UAAU,OAAO,CAAC,UAAU,OAAO;IAC1D,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,oBAAoB,IAAA,8OAAS,EAAC,UAAU,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAK,CAAC;QACvE,OAAO,IAAI,yKAAM,EAAE;YACjB,QAAQ;gBAAC,SAAS,OAAO;aAAC;YAC1B,YAAY;gBAAC,yKAAM,CAAC,EAAE;aAAC;QACzB;IACF,CAAC","debugId":null}},
    {"offset": {"line": 663, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/audit-log.ts"],"sourcesContent":["import { pgTable, uuid, text, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n\n// Audit Log table - tracks all database changes for compliance\nexport const auditLog = pgTable(\"audit_log\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  tableName: text(\"table_name\").notNull(),\n  operation: text(\"operation\").notNull(),\n  oldData: jsonb(\"old_data\"),\n  newData: jsonb(\"new_data\"),\n  userId: uuid(\"user_id\").references(() => profiles.id),\n  occurredAt: timestamp(\"occurred_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const auditLogRelations = relations(auditLog, ({ one }) => ({\n  user: one(profiles, {\n    fields: [auditLog.userId],\n    references: [profiles.id],\n  }),\n}));\n\n// Type exports\nexport type AuditLog = typeof auditLog.$inferSelect;\nexport type NewAuditLog = typeof auditLog.$inferInsert;\n\n// Import other tables for relations (circular import handling)\nimport { profiles } from \"./profiles\";\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAyBA,+DAA+D;AAC/D;;;AAvBO,MAAM,WAAW,IAAA,sPAAO,EAAC,aAAa;IAC3C,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,WAAW,IAAA,6PAAI,EAAC,cAAc,OAAO;IACrC,WAAW,IAAA,6PAAI,EAAC,aAAa,OAAO;IACpC,SAAS,IAAA,+PAAK,EAAC;IACf,SAAS,IAAA,+PAAK,EAAC;IACf,QAAQ,IAAA,6PAAI,EAAC,WAAW,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IACpD,YAAY,IAAA,uQAAS,EAAC,eAAe,UAAU,GAAG,OAAO;AAC3D;AAGO,MAAM,oBAAoB,IAAA,8OAAS,EAAC,UAAU,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACjE,MAAM,IAAI,6KAAQ,EAAE;YAClB,QAAQ;gBAAC,SAAS,MAAM;aAAC;YACzB,YAAY;gBAAC,6KAAQ,CAAC,EAAE;aAAC;QAC3B;IACF,CAAC","debugId":null}},
    {"offset": {"line": 703, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/territories.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  index,\n} from \"drizzle-orm/pg-core\";\n\n// Territories table - regional foundation for safety operations\nexport const territories = pgTable(\n  \"territories\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    name: text(\"name\").notNull().unique(),\n    code: text(\"code\").notNull().unique(), // e.g., \"NORTH\", \"SOUTH\", \"EAST\", \"WEST\"\n    description: text(\"description\"),\n    region: text(\"region\"), // e.g., \"North America\", \"Europe\", \"Asia-Pacific\"\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  },\n  table => ({\n    nameIdx: index(\"territories_name_idx\").on(table.name),\n    codeIdx: index(\"territories_code_idx\").on(table.code),\n    regionIdx: index(\"territories_region_idx\").on(table.region),\n    activeIdx: index(\"territories_active_idx\").on(table.isActive),\n  })\n);\n\n// Type exports\nexport type Territory = typeof territories.$inferSelect;\nexport type NewTerritory = typeof territories.$inferInsert;\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUO,MAAM,cAAc,IAAA,sPAAO,EAChC,eACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,MAAM,IAAA,6PAAI,EAAC,QAAQ,OAAO,GAAG,MAAM;IACnC,MAAM,IAAA,6PAAI,EAAC,QAAQ,OAAO,GAAG,MAAM;IACnC,aAAa,IAAA,6PAAI,EAAC;IAClB,QAAQ,IAAA,6PAAI,EAAC;IACb,UAAU,IAAA,mQAAO,EAAC,aAAa,OAAO,CAAC,MAAM,OAAO;IACpD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GACA,CAAA,QAAS,CAAC;QACR,SAAS,IAAA,sPAAK,EAAC,wBAAwB,EAAE,CAAC,MAAM,IAAI;QACpD,SAAS,IAAA,sPAAK,EAAC,wBAAwB,EAAE,CAAC,MAAM,IAAI;QACpD,WAAW,IAAA,sPAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,MAAM;QAC1D,WAAW,IAAA,sPAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,QAAQ;IAC9D,CAAC","debugId":null}},
    {"offset": {"line": 733, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/user-profiles.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  pgEnum,\n  index,\n} from \"drizzle-orm/pg-core\";\nimport { territories } from \"./territories\";\nimport { userStatusEnum } from \"./profiles\";\n\n// Enums\nexport const userRoleEnum = pgEnum(\"user_role\", [\n  \"safety_admin\",\n  \"safety_manager\",\n  \"safety_coordinator\",\n  \"safety_instructor\",\n  \"safety_rep\",\n  \"plant_manager\",\n  \"hr_admin\",\n  \"employee\",\n]);\n\n// userStatusEnum is exported from profiles.ts to avoid duplication\n\n// User Profiles table - extends Supabase auth.users for safety operations\nexport const userProfiles = pgTable(\n  \"user_profiles\",\n  {\n    id: uuid(\"id\").primaryKey(), // References auth.users.id\n    authUserId: uuid(\"auth_user_id\").notNull().unique(), // Direct reference to auth.users.id\n    territoryId: uuid(\"territory_id\")\n      .notNull()\n      .references(() => territories.id),\n    firstName: text(\"first_name\").notNull(),\n    lastName: text(\"last_name\").notNull(),\n    email: text(\"email\").notNull().unique(),\n    phone: text(\"phone\"),\n    jobTitle: text(\"job_title\"),\n    department: text(\"department\"),\n    role: userRoleEnum(\"role\").default(\"employee\").notNull(),\n    status: userStatusEnum(\"status\").default(\"active\").notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    lastLoginAt: timestamp(\"last_login_at\"),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n    createdBy: uuid(\"created_by\"), // References another user_profiles.id\n  },\n  table => ({\n    authUserIdIdx: index(\"user_profiles_auth_user_id_idx\").on(table.authUserId),\n    territoryIdIdx: index(\"user_profiles_territory_id_idx\").on(\n      table.territoryId\n    ),\n    emailIdx: index(\"user_profiles_email_idx\").on(table.email),\n    roleIdx: index(\"user_profiles_role_idx\").on(table.role),\n    statusIdx: index(\"user_profiles_status_idx\").on(table.status),\n    activeIdx: index(\"user_profiles_active_idx\").on(table.isActive),\n  })\n);\n\n// Type exports\nexport type UserProfile = typeof userProfiles.$inferSelect;\nexport type NewUserProfile = typeof userProfiles.$inferInsert;\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;;;;AAGO,MAAM,eAAe,IAAA,+PAAM,EAAC,aAAa;IAC9C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAKM,MAAM,eAAe,IAAA,sPAAO,EACjC,iBACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU;IACzB,YAAY,IAAA,6PAAI,EAAC,gBAAgB,OAAO,GAAG,MAAM;IACjD,aAAa,IAAA,6PAAI,EAAC,gBACf,OAAO,GACP,UAAU,CAAC,IAAM,mLAAW,CAAC,EAAE;IAClC,WAAW,IAAA,6PAAI,EAAC,cAAc,OAAO;IACrC,UAAU,IAAA,6PAAI,EAAC,aAAa,OAAO;IACnC,OAAO,IAAA,6PAAI,EAAC,SAAS,OAAO,GAAG,MAAM;IACrC,OAAO,IAAA,6PAAI,EAAC;IACZ,UAAU,IAAA,6PAAI,EAAC;IACf,YAAY,IAAA,6PAAI,EAAC;IACjB,MAAM,aAAa,QAAQ,OAAO,CAAC,YAAY,OAAO;IACtD,QAAQ,IAAA,mLAAc,EAAC,UAAU,OAAO,CAAC,UAAU,OAAO;IAC1D,UAAU,IAAA,mQAAO,EAAC,aAAa,OAAO,CAAC,MAAM,OAAO;IACpD,aAAa,IAAA,uQAAS,EAAC;IACvB,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,6PAAI,EAAC;AAClB,GACA,CAAA,QAAS,CAAC;QACR,eAAe,IAAA,sPAAK,EAAC,kCAAkC,EAAE,CAAC,MAAM,UAAU;QAC1E,gBAAgB,IAAA,sPAAK,EAAC,kCAAkC,EAAE,CACxD,MAAM,WAAW;QAEnB,UAAU,IAAA,sPAAK,EAAC,2BAA2B,EAAE,CAAC,MAAM,KAAK;QACzD,SAAS,IAAA,sPAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,IAAI;QACtD,WAAW,IAAA,sPAAK,EAAC,4BAA4B,EAAE,CAAC,MAAM,MAAM;QAC5D,WAAW,IAAA,sPAAK,EAAC,4BAA4B,EAAE,CAAC,MAAM,QAAQ;IAChE,CAAC","debugId":null}},
    {"offset": {"line": 790, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/accounts.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  pgEnum,\n  index,\n  decimal,\n} from \"drizzle-orm/pg-core\";\nimport { territories } from \"./territories\";\nimport { userProfiles } from \"./user-profiles\";\n\n// Enums\nexport const accountTypeEnum = pgEnum(\"account_type\", [\n  \"safety_equipment_customer\",\n  \"training_client\",\n  \"consulting_client\",\n  \"maintenance_client\",\n  \"partner\",\n  \"vendor\",\n]);\n\nexport const accountStatusEnum = pgEnum(\"account_status\", [\n  \"active\",\n  \"inactive\",\n  \"suspended\",\n  \"closed\",\n]);\n\nexport const industryEnum = pgEnum(\"industry\", [\n  \"manufacturing\",\n  \"construction\",\n  \"oil_gas\",\n  \"chemical\",\n  \"mining\",\n  \"utilities\",\n  \"transportation\",\n  \"healthcare\",\n  \"agriculture\",\n  \"other\",\n]);\n\n// Accounts table - safety equipment and service customers\nexport const accounts = pgTable(\n  \"accounts\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    territoryId: uuid(\"territory_id\")\n      .notNull()\n      .references(() => territories.id),\n    ownerId: uuid(\"owner_id\")\n      .notNull()\n      .references(() => userProfiles.id),\n    name: text(\"name\").notNull(),\n    accountNumber: text(\"account_number\").unique(),\n    type: accountTypeEnum(\"type\")\n      .default(\"safety_equipment_customer\")\n      .notNull(),\n    status: accountStatusEnum(\"status\").default(\"active\").notNull(),\n    industry: industryEnum(\"industry\"),\n    website: text(\"website\"),\n    phone: text(\"phone\"),\n    email: text(\"email\"),\n    description: text(\"description\"),\n    annualRevenue: decimal(\"annual_revenue\", { precision: 15, scale: 2 }),\n    employeeCount: text(\"employee_count\"), // e.g., \"1-10\", \"11-50\", \"51-200\", \"201-500\", \"500+\"\n    safetyComplianceLevel: text(\"safety_compliance_level\"), // e.g., \"OSHA Compliant\", \"ISO 45001\", \"Custom\"\n    billingAddress: text(\"billing_address\"),\n    shippingAddress: text(\"shipping_address\"),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n    createdBy: uuid(\"created_by\")\n      .notNull()\n      .references(() => userProfiles.id),\n  },\n  table => ({\n    territoryIdIdx: index(\"accounts_territory_id_idx\").on(table.territoryId),\n    ownerIdIdx: index(\"accounts_owner_id_idx\").on(table.ownerId),\n    nameIdx: index(\"accounts_name_idx\").on(table.name),\n    accountNumberIdx: index(\"accounts_account_number_idx\").on(\n      table.accountNumber\n    ),\n    typeIdx: index(\"accounts_type_idx\").on(table.type),\n    statusIdx: index(\"accounts_status_idx\").on(table.status),\n    industryIdx: index(\"accounts_industry_idx\").on(table.industry),\n    activeIdx: index(\"accounts_active_idx\").on(table.isActive),\n  })\n);\n\n// Type exports\nexport type Account = typeof accounts.$inferSelect;\nexport type NewAccount = typeof accounts.$inferInsert;\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;;;;AAGO,MAAM,kBAAkB,IAAA,+PAAM,EAAC,gBAAgB;IACpD;IACA;IACA;IACA;IACA;IACA;CACD;AAEM,MAAM,oBAAoB,IAAA,+PAAM,EAAC,kBAAkB;IACxD;IACA;IACA;IACA;CACD;AAEM,MAAM,eAAe,IAAA,+PAAM,EAAC,YAAY;IAC7C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAGM,MAAM,WAAW,IAAA,sPAAO,EAC7B,YACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,aAAa,IAAA,6PAAI,EAAC,gBACf,OAAO,GACP,UAAU,CAAC,IAAM,mLAAW,CAAC,EAAE;IAClC,SAAS,IAAA,6PAAI,EAAC,YACX,OAAO,GACP,UAAU,CAAC,IAAM,yLAAY,CAAC,EAAE;IACnC,MAAM,IAAA,6PAAI,EAAC,QAAQ,OAAO;IAC1B,eAAe,IAAA,6PAAI,EAAC,kBAAkB,MAAM;IAC5C,MAAM,gBAAgB,QACnB,OAAO,CAAC,6BACR,OAAO;IACV,QAAQ,kBAAkB,UAAU,OAAO,CAAC,UAAU,OAAO;IAC7D,UAAU,aAAa;IACvB,SAAS,IAAA,6PAAI,EAAC;IACd,OAAO,IAAA,6PAAI,EAAC;IACZ,OAAO,IAAA,6PAAI,EAAC;IACZ,aAAa,IAAA,6PAAI,EAAC;IAClB,eAAe,IAAA,mQAAO,EAAC,kBAAkB;QAAE,WAAW;QAAI,OAAO;IAAE;IACnE,eAAe,IAAA,6PAAI,EAAC;IACpB,uBAAuB,IAAA,6PAAI,EAAC;IAC5B,gBAAgB,IAAA,6PAAI,EAAC;IACrB,iBAAiB,IAAA,6PAAI,EAAC;IACtB,UAAU,IAAA,mQAAO,EAAC,aAAa,OAAO,CAAC,MAAM,OAAO;IACpD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,6PAAI,EAAC,cACb,OAAO,GACP,UAAU,CAAC,IAAM,yLAAY,CAAC,EAAE;AACrC,GACA,CAAA,QAAS,CAAC;QACR,gBAAgB,IAAA,sPAAK,EAAC,6BAA6B,EAAE,CAAC,MAAM,WAAW;QACvE,YAAY,IAAA,sPAAK,EAAC,yBAAyB,EAAE,CAAC,MAAM,OAAO;QAC3D,SAAS,IAAA,sPAAK,EAAC,qBAAqB,EAAE,CAAC,MAAM,IAAI;QACjD,kBAAkB,IAAA,sPAAK,EAAC,+BAA+B,EAAE,CACvD,MAAM,aAAa;QAErB,SAAS,IAAA,sPAAK,EAAC,qBAAqB,EAAE,CAAC,MAAM,IAAI;QACjD,WAAW,IAAA,sPAAK,EAAC,uBAAuB,EAAE,CAAC,MAAM,MAAM;QACvD,aAAa,IAAA,sPAAK,EAAC,yBAAyB,EAAE,CAAC,MAAM,QAAQ;QAC7D,WAAW,IAAA,sPAAK,EAAC,uBAAuB,EAAE,CAAC,MAAM,QAAQ;IAC3D,CAAC","debugId":null}},
    {"offset": {"line": 878, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/branches.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  index,\n} from \"drizzle-orm/pg-core\";\nimport { accounts } from \"./accounts\";\n\n// Branches table - physical locations for safety operations\nexport const branches = pgTable(\n  \"branches\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    accountId: uuid(\"account_id\")\n      .notNull()\n      .references(() => accounts.id),\n    name: text(\"name\").notNull(),\n    branchCode: text(\"branch_code\"), // Internal code for the branch\n    address: text(\"address\").notNull(),\n    city: text(\"city\").notNull(),\n    state: text(\"state\").notNull(),\n    postalCode: text(\"postal_code\").notNull(),\n    country: text(\"country\").default(\"US\").notNull(),\n    phone: text(\"phone\"),\n    email: text(\"email\"),\n    contactPerson: text(\"contact_person\"),\n    safetyManager: text(\"safety_manager\"), // Primary safety contact\n    isPrimary: boolean(\"is_primary\").default(false).notNull(), // Primary branch for the account\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  },\n  table => ({\n    accountIdIdx: index(\"branches_account_id_idx\").on(table.accountId),\n    nameIdx: index(\"branches_name_idx\").on(table.name),\n    branchCodeIdx: index(\"branches_branch_code_idx\").on(table.branchCode),\n    cityIdx: index(\"branches_city_idx\").on(table.city),\n    stateIdx: index(\"branches_state_idx\").on(table.state),\n    primaryIdx: index(\"branches_primary_idx\").on(table.isPrimary),\n    activeIdx: index(\"branches_active_idx\").on(table.isActive),\n  })\n);\n\n// Type exports\nexport type Branch = typeof branches.$inferSelect;\nexport type NewBranch = typeof branches.$inferInsert;\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;AAGO,MAAM,WAAW,IAAA,sPAAO,EAC7B,YACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,WAAW,IAAA,6PAAI,EAAC,cACb,OAAO,GACP,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IAC/B,MAAM,IAAA,6PAAI,EAAC,QAAQ,OAAO;IAC1B,YAAY,IAAA,6PAAI,EAAC;IACjB,SAAS,IAAA,6PAAI,EAAC,WAAW,OAAO;IAChC,MAAM,IAAA,6PAAI,EAAC,QAAQ,OAAO;IAC1B,OAAO,IAAA,6PAAI,EAAC,SAAS,OAAO;IAC5B,YAAY,IAAA,6PAAI,EAAC,eAAe,OAAO;IACvC,SAAS,IAAA,6PAAI,EAAC,WAAW,OAAO,CAAC,MAAM,OAAO;IAC9C,OAAO,IAAA,6PAAI,EAAC;IACZ,OAAO,IAAA,6PAAI,EAAC;IACZ,eAAe,IAAA,6PAAI,EAAC;IACpB,eAAe,IAAA,6PAAI,EAAC;IACpB,WAAW,IAAA,mQAAO,EAAC,cAAc,OAAO,CAAC,OAAO,OAAO;IACvD,UAAU,IAAA,mQAAO,EAAC,aAAa,OAAO,CAAC,MAAM,OAAO;IACpD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GACA,CAAA,QAAS,CAAC;QACR,cAAc,IAAA,sPAAK,EAAC,2BAA2B,EAAE,CAAC,MAAM,SAAS;QACjE,SAAS,IAAA,sPAAK,EAAC,qBAAqB,EAAE,CAAC,MAAM,IAAI;QACjD,eAAe,IAAA,sPAAK,EAAC,4BAA4B,EAAE,CAAC,MAAM,UAAU;QACpE,SAAS,IAAA,sPAAK,EAAC,qBAAqB,EAAE,CAAC,MAAM,IAAI;QACjD,UAAU,IAAA,sPAAK,EAAC,sBAAsB,EAAE,CAAC,MAAM,KAAK;QACpD,YAAY,IAAA,sPAAK,EAAC,wBAAwB,EAAE,CAAC,MAAM,SAAS;QAC5D,WAAW,IAAA,sPAAK,EAAC,uBAAuB,EAAE,CAAC,MAAM,QAAQ;IAC3D,CAAC","debugId":null}},
    {"offset": {"line": 922, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/contacts.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  pgEnum,\n  index,\n} from \"drizzle-orm/pg-core\";\nimport { accounts } from \"./accounts\";\nimport { branches } from \"./branches\";\nimport { userProfiles } from \"./user-profiles\";\n\n// Enums\nexport const contactRoleEnum = pgEnum(\"contact_role\", [\n  \"safety_manager\",\n  \"safety_coordinator\",\n  \"safety_instructor\",\n  \"hr_manager\",\n  \"plant_manager\",\n  \"purchasing_manager\",\n  \"decision_maker\",\n  \"influencer\",\n  \"user\",\n  \"other\",\n]);\n\nexport const contactStatusEnum = pgEnum(\"contact_status\", [\n  \"active\",\n  \"inactive\",\n  \"do_not_contact\",\n]);\n\n// Contacts table - individual people in safety operations\nexport const contacts = pgTable(\n  \"contacts\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    accountId: uuid(\"account_id\")\n      .notNull()\n      .references(() => accounts.id),\n    branchId: uuid(\"branch_id\").references(() => branches.id), // Optional - may not be assigned to specific branch\n    ownerId: uuid(\"owner_id\")\n      .notNull()\n      .references(() => userProfiles.id),\n    firstName: text(\"first_name\").notNull(),\n    lastName: text(\"last_name\").notNull(),\n    email: text(\"email\").notNull(),\n    phone: text(\"phone\"),\n    mobile: text(\"mobile\"),\n    jobTitle: text(\"job_title\"),\n    department: text(\"department\"),\n    role: contactRoleEnum(\"role\").default(\"user\").notNull(),\n    status: contactStatusEnum(\"status\").default(\"active\").notNull(),\n    isPrimary: boolean(\"is_primary\").default(false).notNull(), // Primary contact for the account\n    safetyCertifications: text(\"safety_certifications\"), // e.g., \"OSHA 30\", \"CSP\", \"ASP\"\n    notes: text(\"notes\"),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n    createdBy: uuid(\"created_by\")\n      .notNull()\n      .references(() => userProfiles.id),\n  },\n  table => ({\n    accountIdIdx: index(\"contacts_account_id_idx\").on(table.accountId),\n    branchIdIdx: index(\"contacts_branch_id_idx\").on(table.branchId),\n    ownerIdIdx: index(\"contacts_owner_id_idx\").on(table.ownerId),\n    emailIdx: index(\"contacts_email_idx\").on(table.email),\n    nameIdx: index(\"contacts_name_idx\").on(table.firstName, table.lastName),\n    roleIdx: index(\"contacts_role_idx\").on(table.role),\n    statusIdx: index(\"contacts_status_idx\").on(table.status),\n    primaryIdx: index(\"contacts_primary_idx\").on(table.isPrimary),\n    activeIdx: index(\"contacts_active_idx\").on(table.isActive),\n  })\n);\n\n// Type exports\nexport type Contact = typeof contacts.$inferSelect;\nexport type NewContact = typeof contacts.$inferInsert;\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;;;;;AAGO,MAAM,kBAAkB,IAAA,+PAAM,EAAC,gBAAgB;IACpD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAEM,MAAM,oBAAoB,IAAA,+PAAM,EAAC,kBAAkB;IACxD;IACA;IACA;CACD;AAGM,MAAM,WAAW,IAAA,sPAAO,EAC7B,YACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,WAAW,IAAA,6PAAI,EAAC,cACb,OAAO,GACP,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IAC/B,UAAU,IAAA,6PAAI,EAAC,aAAa,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IACxD,SAAS,IAAA,6PAAI,EAAC,YACX,OAAO,GACP,UAAU,CAAC,IAAM,yLAAY,CAAC,EAAE;IACnC,WAAW,IAAA,6PAAI,EAAC,cAAc,OAAO;IACrC,UAAU,IAAA,6PAAI,EAAC,aAAa,OAAO;IACnC,OAAO,IAAA,6PAAI,EAAC,SAAS,OAAO;IAC5B,OAAO,IAAA,6PAAI,EAAC;IACZ,QAAQ,IAAA,6PAAI,EAAC;IACb,UAAU,IAAA,6PAAI,EAAC;IACf,YAAY,IAAA,6PAAI,EAAC;IACjB,MAAM,gBAAgB,QAAQ,OAAO,CAAC,QAAQ,OAAO;IACrD,QAAQ,kBAAkB,UAAU,OAAO,CAAC,UAAU,OAAO;IAC7D,WAAW,IAAA,mQAAO,EAAC,cAAc,OAAO,CAAC,OAAO,OAAO;IACvD,sBAAsB,IAAA,6PAAI,EAAC;IAC3B,OAAO,IAAA,6PAAI,EAAC;IACZ,UAAU,IAAA,mQAAO,EAAC,aAAa,OAAO,CAAC,MAAM,OAAO;IACpD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,6PAAI,EAAC,cACb,OAAO,GACP,UAAU,CAAC,IAAM,yLAAY,CAAC,EAAE;AACrC,GACA,CAAA,QAAS,CAAC;QACR,cAAc,IAAA,sPAAK,EAAC,2BAA2B,EAAE,CAAC,MAAM,SAAS;QACjE,aAAa,IAAA,sPAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,QAAQ;QAC9D,YAAY,IAAA,sPAAK,EAAC,yBAAyB,EAAE,CAAC,MAAM,OAAO;QAC3D,UAAU,IAAA,sPAAK,EAAC,sBAAsB,EAAE,CAAC,MAAM,KAAK;QACpD,SAAS,IAAA,sPAAK,EAAC,qBAAqB,EAAE,CAAC,MAAM,SAAS,EAAE,MAAM,QAAQ;QACtE,SAAS,IAAA,sPAAK,EAAC,qBAAqB,EAAE,CAAC,MAAM,IAAI;QACjD,WAAW,IAAA,sPAAK,EAAC,uBAAuB,EAAE,CAAC,MAAM,MAAM;QACvD,YAAY,IAAA,sPAAK,EAAC,wBAAwB,EAAE,CAAC,MAAM,SAAS;QAC5D,WAAW,IAAA,sPAAK,EAAC,uBAAuB,EAAE,CAAC,MAAM,QAAQ;IAC3D,CAAC","debugId":null}},
    {"offset": {"line": 997, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/activity-logs.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  pgEnum,\n  index,\n} from \"drizzle-orm/pg-core\";\nimport { accounts } from \"./accounts\";\nimport { contacts } from \"./contacts\";\nimport { userProfiles } from \"./user-profiles\";\n\n// Enums\nexport const activityTypeEnum = pgEnum(\"activity_type\", [\n  \"safety_consultation\",\n  \"equipment_demo\",\n  \"training_session\",\n  \"safety_audit\",\n  \"compliance_review\",\n  \"incident_follow_up\",\n  \"proposal_presentation\",\n  \"follow_up_call\",\n  \"site_visit\",\n  \"note\",\n  \"task\",\n  \"other\",\n]);\n\nexport const activityStatusEnum = pgEnum(\"activity_status\", [\n  \"completed\",\n  \"pending\",\n  \"cancelled\",\n  \"rescheduled\",\n]);\n\nexport const activityPriorityEnum = pgEnum(\"activity_priority\", [\n  \"low\",\n  \"medium\",\n  \"high\",\n  \"urgent\",\n]);\n\n// Activity Logs table - safety-related activities\nexport const activityLogs = pgTable(\n  \"activity_logs\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    accountId: uuid(\"account_id\").references(() => accounts.id), // Optional - some activities may not be account-specific\n    contactId: uuid(\"contact_id\").references(() => contacts.id), // Optional - some activities may not be contact-specific\n    userId: uuid(\"user_id\")\n      .notNull()\n      .references(() => userProfiles.id),\n    type: activityTypeEnum(\"type\").notNull(),\n    subject: text(\"subject\").notNull(),\n    description: text(\"description\"),\n    status: activityStatusEnum(\"status\").default(\"completed\").notNull(),\n    priority: activityPriorityEnum(\"priority\").default(\"medium\").notNull(),\n    scheduledAt: timestamp(\"scheduled_at\"), // For future activities\n    completedAt: timestamp(\"completed_at\"), // When the activity was completed\n    duration: text(\"duration\"), // e.g., \"30 minutes\", \"1 hour\"\n    outcome: text(\"outcome\"), // Result of the activity\n    nextSteps: text(\"next_steps\"), // Follow-up actions\n    safetyNotes: text(\"safety_notes\"), // Safety-specific observations\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  },\n  table => ({\n    accountIdIdx: index(\"activity_logs_account_id_idx\").on(table.accountId),\n    contactIdIdx: index(\"activity_logs_contact_id_idx\").on(table.contactId),\n    userIdIdx: index(\"activity_logs_user_id_idx\").on(table.userId),\n    typeIdx: index(\"activity_logs_type_idx\").on(table.type),\n    statusIdx: index(\"activity_logs_status_idx\").on(table.status),\n    priorityIdx: index(\"activity_logs_priority_idx\").on(table.priority),\n    scheduledAtIdx: index(\"activity_logs_scheduled_at_idx\").on(\n      table.scheduledAt\n    ),\n    completedAtIdx: index(\"activity_logs_completed_at_idx\").on(\n      table.completedAt\n    ),\n    activeIdx: index(\"activity_logs_active_idx\").on(table.isActive),\n  })\n);\n\n// Type exports\nexport type ActivityLog = typeof activityLogs.$inferSelect;\nexport type NewActivityLog = typeof activityLogs.$inferInsert;\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;;;;;AAGO,MAAM,mBAAmB,IAAA,+PAAM,EAAC,iBAAiB;IACtD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAEM,MAAM,qBAAqB,IAAA,+PAAM,EAAC,mBAAmB;IAC1D;IACA;IACA;IACA;CACD;AAEM,MAAM,uBAAuB,IAAA,+PAAM,EAAC,qBAAqB;IAC9D;IACA;IACA;IACA;CACD;AAGM,MAAM,eAAe,IAAA,sPAAO,EACjC,iBACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,WAAW,IAAA,6PAAI,EAAC,cAAc,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IAC1D,WAAW,IAAA,6PAAI,EAAC,cAAc,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IAC1D,QAAQ,IAAA,6PAAI,EAAC,WACV,OAAO,GACP,UAAU,CAAC,IAAM,yLAAY,CAAC,EAAE;IACnC,MAAM,iBAAiB,QAAQ,OAAO;IACtC,SAAS,IAAA,6PAAI,EAAC,WAAW,OAAO;IAChC,aAAa,IAAA,6PAAI,EAAC;IAClB,QAAQ,mBAAmB,UAAU,OAAO,CAAC,aAAa,OAAO;IACjE,UAAU,qBAAqB,YAAY,OAAO,CAAC,UAAU,OAAO;IACpE,aAAa,IAAA,uQAAS,EAAC;IACvB,aAAa,IAAA,uQAAS,EAAC;IACvB,UAAU,IAAA,6PAAI,EAAC;IACf,SAAS,IAAA,6PAAI,EAAC;IACd,WAAW,IAAA,6PAAI,EAAC;IAChB,aAAa,IAAA,6PAAI,EAAC;IAClB,UAAU,IAAA,mQAAO,EAAC,aAAa,OAAO,CAAC,MAAM,OAAO;IACpD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GACA,CAAA,QAAS,CAAC;QACR,cAAc,IAAA,sPAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,SAAS;QACtE,cAAc,IAAA,sPAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,SAAS;QACtE,WAAW,IAAA,sPAAK,EAAC,6BAA6B,EAAE,CAAC,MAAM,MAAM;QAC7D,SAAS,IAAA,sPAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,IAAI;QACtD,WAAW,IAAA,sPAAK,EAAC,4BAA4B,EAAE,CAAC,MAAM,MAAM;QAC5D,aAAa,IAAA,sPAAK,EAAC,8BAA8B,EAAE,CAAC,MAAM,QAAQ;QAClE,gBAAgB,IAAA,sPAAK,EAAC,kCAAkC,EAAE,CACxD,MAAM,WAAW;QAEnB,gBAAgB,IAAA,sPAAK,EAAC,kCAAkC,EAAE,CACxD,MAAM,WAAW;QAEnB,WAAW,IAAA,sPAAK,EAAC,4BAA4B,EAAE,CAAC,MAAM,QAAQ;IAChE,CAAC","debugId":null}},
    {"offset": {"line": 1081, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/opportunities.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  pgEnum,\n  index,\n  decimal,\n} from \"drizzle-orm/pg-core\";\nimport { accounts } from \"./accounts\";\nimport { contacts } from \"./contacts\";\nimport { userProfiles } from \"./user-profiles\";\n\n// Enums\nexport const opportunityStageEnum = pgEnum(\"opportunity_stage\", [\n  \"prospecting\",\n  \"qualification\",\n  \"needs_analysis\",\n  \"proposal\",\n  \"negotiation\",\n  \"closed_won\",\n  \"closed_lost\",\n]);\n\nexport const opportunityStatusEnum = pgEnum(\"opportunity_status\", [\n  \"open\",\n  \"closed\",\n  \"cancelled\",\n]);\n\nexport const opportunitySourceEnum = pgEnum(\"opportunity_source\", [\n  \"inbound\",\n  \"outbound\",\n  \"referral\",\n  \"website\",\n  \"trade_show\",\n  \"safety_conference\",\n  \"cold_call\",\n  \"other\",\n]);\n\nexport const opportunityTypeEnum = pgEnum(\"opportunity_type\", [\n  \"safety_equipment\",\n  \"safety_training\",\n  \"safety_consulting\",\n  \"safety_audit\",\n  \"compliance_services\",\n  \"maintenance_contract\",\n  \"other\",\n]);\n\nexport const probabilityEnum = pgEnum(\"probability\", [\n  \"10\",\n  \"20\",\n  \"30\",\n  \"40\",\n  \"50\",\n  \"60\",\n  \"70\",\n  \"80\",\n  \"90\",\n  \"100\",\n]);\n\n// Opportunities table - safety equipment and services sales pipeline\nexport const opportunities = pgTable(\n  \"opportunities\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    accountId: uuid(\"account_id\")\n      .notNull()\n      .references(() => accounts.id),\n    contactId: uuid(\"contact_id\").references(() => contacts.id), // Primary contact for this opportunity\n    ownerId: uuid(\"owner_id\")\n      .notNull()\n      .references(() => userProfiles.id),\n    name: text(\"name\").notNull(),\n    description: text(\"description\"),\n    type: opportunityTypeEnum(\"type\").notNull(),\n    stage: opportunityStageEnum(\"stage\").default(\"prospecting\").notNull(),\n    status: opportunityStatusEnum(\"status\").default(\"open\").notNull(),\n    source: opportunitySourceEnum(\"source\"),\n    probability: probabilityEnum(\"probability\").default(\"10\").notNull(),\n    amount: decimal(\"amount\", { precision: 15, scale: 2 }), // Expected deal value\n    closeDate: timestamp(\"close_date\"), // Expected close date\n    actualCloseDate: timestamp(\"actual_close_date\"), // Actual close date\n    lostReason: text(\"lost_reason\"), // Reason if opportunity was lost\n    nextSteps: text(\"next_steps\"), // Next actions\n    safetyRequirements: text(\"safety_requirements\"), // Specific safety needs\n    complianceNotes: text(\"compliance_notes\"), // Compliance-related notes\n    notes: text(\"notes\"),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n    createdBy: uuid(\"created_by\")\n      .notNull()\n      .references(() => userProfiles.id),\n  },\n  table => ({\n    accountIdIdx: index(\"opportunities_account_id_idx\").on(table.accountId),\n    contactIdIdx: index(\"opportunities_contact_id_idx\").on(table.contactId),\n    ownerIdIdx: index(\"opportunities_owner_id_idx\").on(table.ownerId),\n    nameIdx: index(\"opportunities_name_idx\").on(table.name),\n    typeIdx: index(\"opportunities_type_idx\").on(table.type),\n    stageIdx: index(\"opportunities_stage_idx\").on(table.stage),\n    statusIdx: index(\"opportunities_status_idx\").on(table.status),\n    sourceIdx: index(\"opportunities_source_idx\").on(table.source),\n    probabilityIdx: index(\"opportunities_probability_idx\").on(\n      table.probability\n    ),\n    closeDateIdx: index(\"opportunities_close_date_idx\").on(table.closeDate),\n    activeIdx: index(\"opportunities_active_idx\").on(table.isActive),\n  })\n);\n\n// Type exports\nexport type Opportunity = typeof opportunities.$inferSelect;\nexport type NewOpportunity = typeof opportunities.$inferInsert;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1199, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/sales-facts.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  pgEnum,\n  index,\n  decimal,\n  integer,\n} from \"drizzle-orm/pg-core\";\nimport { accounts } from \"./accounts\";\nimport { opportunities } from \"./opportunities\";\nimport { userProfiles } from \"./user-profiles\";\n\n// Enums\nexport const salesFactTypeEnum = pgEnum(\"sales_fact_type\", [\n  \"safety_equipment_revenue\",\n  \"training_revenue\",\n  \"consulting_revenue\",\n  \"maintenance_revenue\",\n  \"equipment_units_sold\",\n  \"training_sessions_delivered\",\n  \"consulting_hours\",\n  \"contract_value\",\n  \"renewal\",\n  \"upsell\",\n  \"cross_sell\",\n]);\n\nexport const periodTypeEnum = pgEnum(\"period_type\", [\n  \"daily\",\n  \"weekly\",\n  \"monthly\",\n  \"quarterly\",\n  \"yearly\",\n]);\n\n// Sales Facts table - historical data for safety business reporting\nexport const salesFacts = pgTable(\n  \"sales_facts\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    accountId: uuid(\"account_id\")\n      .notNull()\n      .references(() => accounts.id),\n    opportunityId: uuid(\"opportunity_id\").references(() => opportunities.id), // Optional - may not be tied to specific opportunity\n    userId: uuid(\"user_id\")\n      .notNull()\n      .references(() => userProfiles.id),\n    factType: salesFactTypeEnum(\"fact_type\").notNull(),\n    periodType: periodTypeEnum(\"period_type\").notNull(),\n    periodStart: timestamp(\"period_start\").notNull(),\n    periodEnd: timestamp(\"period_end\").notNull(),\n    amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n    quantity: integer(\"quantity\"), // Number of units, sessions, hours, etc.\n    currency: text(\"currency\").default(\"USD\").notNull(),\n    description: text(\"description\"),\n    safetyCategory: text(\"safety_category\"), // e.g., \"PPE\", \"Training\", \"Consulting\"\n    complianceStandard: text(\"compliance_standard\"), // e.g., \"OSHA\", \"ISO 45001\", \"ANSI\"\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  },\n  table => ({\n    accountIdIdx: index(\"sales_facts_account_id_idx\").on(table.accountId),\n    opportunityIdIdx: index(\"sales_facts_opportunity_id_idx\").on(\n      table.opportunityId\n    ),\n    userIdIdx: index(\"sales_facts_user_id_idx\").on(table.userId),\n    factTypeIdx: index(\"sales_facts_fact_type_idx\").on(table.factType),\n    periodTypeIdx: index(\"sales_facts_period_type_idx\").on(table.periodType),\n    periodStartIdx: index(\"sales_facts_period_start_idx\").on(table.periodStart),\n    periodEndIdx: index(\"sales_facts_period_end_idx\").on(table.periodEnd),\n    safetyCategoryIdx: index(\"sales_facts_safety_category_idx\").on(\n      table.safetyCategory\n    ),\n    activeIdx: index(\"sales_facts_active_idx\").on(table.isActive),\n  })\n);\n\n// Type exports\nexport type SalesFact = typeof salesFacts.$inferSelect;\nexport type NewSalesFact = typeof salesFacts.$inferInsert;\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;;;;;AAGO,MAAM,oBAAoB,IAAA,+PAAM,EAAC,mBAAmB;IACzD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAEM,MAAM,iBAAiB,IAAA,+PAAM,EAAC,eAAe;IAClD;IACA;IACA;IACA;IACA;CACD;AAGM,MAAM,aAAa,IAAA,sPAAO,EAC/B,eACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,WAAW,IAAA,6PAAI,EAAC,cACb,OAAO,GACP,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IAC/B,eAAe,IAAA,6PAAI,EAAC,kBAAkB,UAAU,CAAC,IAAM,uLAAa,CAAC,EAAE;IACvE,QAAQ,IAAA,6PAAI,EAAC,WACV,OAAO,GACP,UAAU,CAAC,IAAM,yLAAY,CAAC,EAAE;IACnC,UAAU,kBAAkB,aAAa,OAAO;IAChD,YAAY,eAAe,eAAe,OAAO;IACjD,aAAa,IAAA,uQAAS,EAAC,gBAAgB,OAAO;IAC9C,WAAW,IAAA,uQAAS,EAAC,cAAc,OAAO;IAC1C,QAAQ,IAAA,mQAAO,EAAC,UAAU;QAAE,WAAW;QAAI,OAAO;IAAE,GAAG,OAAO;IAC9D,UAAU,IAAA,mQAAO,EAAC;IAClB,UAAU,IAAA,6PAAI,EAAC,YAAY,OAAO,CAAC,OAAO,OAAO;IACjD,aAAa,IAAA,6PAAI,EAAC;IAClB,gBAAgB,IAAA,6PAAI,EAAC;IACrB,oBAAoB,IAAA,6PAAI,EAAC;IACzB,UAAU,IAAA,mQAAO,EAAC,aAAa,OAAO,CAAC,MAAM,OAAO;IACpD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GACA,CAAA,QAAS,CAAC;QACR,cAAc,IAAA,sPAAK,EAAC,8BAA8B,EAAE,CAAC,MAAM,SAAS;QACpE,kBAAkB,IAAA,sPAAK,EAAC,kCAAkC,EAAE,CAC1D,MAAM,aAAa;QAErB,WAAW,IAAA,sPAAK,EAAC,2BAA2B,EAAE,CAAC,MAAM,MAAM;QAC3D,aAAa,IAAA,sPAAK,EAAC,6BAA6B,EAAE,CAAC,MAAM,QAAQ;QACjE,eAAe,IAAA,sPAAK,EAAC,+BAA+B,EAAE,CAAC,MAAM,UAAU;QACvE,gBAAgB,IAAA,sPAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,WAAW;QAC1E,cAAc,IAAA,sPAAK,EAAC,8BAA8B,EAAE,CAAC,MAAM,SAAS;QACpE,mBAAmB,IAAA,sPAAK,EAAC,mCAAmC,EAAE,CAC5D,MAAM,cAAc;QAEtB,WAAW,IAAA,sPAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,QAAQ;IAC9D,CAAC","debugId":null}},
    {"offset": {"line": 1279, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/products.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  pgEnum,\n  index,\n  decimal,\n} from \"drizzle-orm/pg-core\";\nimport { territories } from \"./territories\";\n\n// Enums\nexport const productTypeEnum = pgEnum(\"product_type\", [\n  \"safety_equipment\",\n  \"ppe\", // Personal Protective Equipment\n  \"safety_training\",\n  \"safety_consulting\",\n  \"safety_software\",\n  \"safety_services\",\n  \"maintenance_services\",\n  \"other\",\n]);\n\nexport const productStatusEnum = pgEnum(\"product_status\", [\n  \"active\",\n  \"inactive\",\n  \"discontinued\",\n  \"coming_soon\",\n]);\n\nexport const complianceStandardEnum = pgEnum(\"compliance_standard\", [\n  \"osha\",\n  \"ansi\",\n  \"niosh\",\n  \"iso_45001\",\n  \"iso_14001\",\n  \"custom\",\n  \"other\",\n]);\n\n// Products table - safety equipment and services catalog\nexport const products = pgTable(\n  \"products\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    territoryId: uuid(\"territory_id\")\n      .notNull()\n      .references(() => territories.id),\n    sku: text(\"sku\").notNull().unique(), // Stock Keeping Unit\n    name: text(\"name\").notNull(),\n    description: text(\"description\"),\n    type: productTypeEnum(\"type\").notNull(),\n    status: productStatusEnum(\"status\").default(\"active\").notNull(),\n    category: text(\"category\"), // e.g., \"Head Protection\", \"Fall Protection\", \"Online Training\"\n    subcategory: text(\"subcategory\"), // e.g., \"Hard Hats\", \"Safety Harnesses\", \"OSHA 10-Hour\"\n    unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }),\n    currency: text(\"currency\").default(\"USD\").notNull(),\n    unitOfMeasure: text(\"unit_of_measure\"), // e.g., \"each\", \"hour\", \"license\", \"course\"\n    weight: decimal(\"weight\", { precision: 8, scale: 2 }), // in pounds\n    dimensions: text(\"dimensions\"), // e.g., \"12x8x4 inches\"\n    manufacturer: text(\"manufacturer\"),\n    model: text(\"model\"),\n    complianceStandards: text(\"compliance_standards\"), // JSON array of compliance standards\n    safetyFeatures: text(\"safety_features\"), // Key safety features\n    specifications: text(\"specifications\"), // JSON string or detailed specs\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  },\n  table => ({\n    territoryIdIdx: index(\"products_territory_id_idx\").on(table.territoryId),\n    skuIdx: index(\"products_sku_idx\").on(table.sku),\n    nameIdx: index(\"products_name_idx\").on(table.name),\n    typeIdx: index(\"products_type_idx\").on(table.type),\n    statusIdx: index(\"products_status_idx\").on(table.status),\n    categoryIdx: index(\"products_category_idx\").on(table.category),\n    subcategoryIdx: index(\"products_subcategory_idx\").on(table.subcategory),\n    activeIdx: index(\"products_active_idx\").on(table.isActive),\n  })\n);\n\n// Type exports\nexport type Product = typeof products.$inferSelect;\nexport type NewProduct = typeof products.$inferInsert;\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;AAGO,MAAM,kBAAkB,IAAA,+PAAM,EAAC,gBAAgB;IACpD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAEM,MAAM,oBAAoB,IAAA,+PAAM,EAAC,kBAAkB;IACxD;IACA;IACA;IACA;CACD;AAEM,MAAM,yBAAyB,IAAA,+PAAM,EAAC,uBAAuB;IAClE;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAGM,MAAM,WAAW,IAAA,sPAAO,EAC7B,YACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,aAAa,IAAA,6PAAI,EAAC,gBACf,OAAO,GACP,UAAU,CAAC,IAAM,mLAAW,CAAC,EAAE;IAClC,KAAK,IAAA,6PAAI,EAAC,OAAO,OAAO,GAAG,MAAM;IACjC,MAAM,IAAA,6PAAI,EAAC,QAAQ,OAAO;IAC1B,aAAa,IAAA,6PAAI,EAAC;IAClB,MAAM,gBAAgB,QAAQ,OAAO;IACrC,QAAQ,kBAAkB,UAAU,OAAO,CAAC,UAAU,OAAO;IAC7D,UAAU,IAAA,6PAAI,EAAC;IACf,aAAa,IAAA,6PAAI,EAAC;IAClB,WAAW,IAAA,mQAAO,EAAC,cAAc;QAAE,WAAW;QAAI,OAAO;IAAE;IAC3D,UAAU,IAAA,6PAAI,EAAC,YAAY,OAAO,CAAC,OAAO,OAAO;IACjD,eAAe,IAAA,6PAAI,EAAC;IACpB,QAAQ,IAAA,mQAAO,EAAC,UAAU;QAAE,WAAW;QAAG,OAAO;IAAE;IACnD,YAAY,IAAA,6PAAI,EAAC;IACjB,cAAc,IAAA,6PAAI,EAAC;IACnB,OAAO,IAAA,6PAAI,EAAC;IACZ,qBAAqB,IAAA,6PAAI,EAAC;IAC1B,gBAAgB,IAAA,6PAAI,EAAC;IACrB,gBAAgB,IAAA,6PAAI,EAAC;IACrB,UAAU,IAAA,mQAAO,EAAC,aAAa,OAAO,CAAC,MAAM,OAAO;IACpD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GACA,CAAA,QAAS,CAAC;QACR,gBAAgB,IAAA,sPAAK,EAAC,6BAA6B,EAAE,CAAC,MAAM,WAAW;QACvE,QAAQ,IAAA,sPAAK,EAAC,oBAAoB,EAAE,CAAC,MAAM,GAAG;QAC9C,SAAS,IAAA,sPAAK,EAAC,qBAAqB,EAAE,CAAC,MAAM,IAAI;QACjD,SAAS,IAAA,sPAAK,EAAC,qBAAqB,EAAE,CAAC,MAAM,IAAI;QACjD,WAAW,IAAA,sPAAK,EAAC,uBAAuB,EAAE,CAAC,MAAM,MAAM;QACvD,aAAa,IAAA,sPAAK,EAAC,yBAAyB,EAAE,CAAC,MAAM,QAAQ;QAC7D,gBAAgB,IAAA,sPAAK,EAAC,4BAA4B,EAAE,CAAC,MAAM,WAAW;QACtE,WAAW,IAAA,sPAAK,EAAC,uBAAuB,EAAE,CAAC,MAAM,QAAQ;IAC3D,CAAC","debugId":null}},
    {"offset": {"line": 1368, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/projects.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  pgEnum,\n  index,\n  decimal,\n} from \"drizzle-orm/pg-core\";\nimport { accounts } from \"./accounts\";\nimport { userProfiles } from \"./user-profiles\";\n\n// Enums\nexport const projectTypeEnum = pgEnum(\"project_type\", [\n  \"safety_audit\",\n  \"safety_consulting\",\n  \"safety_training\",\n  \"safety_equipment_installation\",\n  \"compliance_assessment\",\n  \"safety_system_implementation\",\n  \"incident_investigation\",\n  \"safety_program_development\",\n  \"other\",\n]);\n\nexport const projectStatusEnum = pgEnum(\"project_status\", [\n  \"planning\",\n  \"in_progress\",\n  \"on_hold\",\n  \"completed\",\n  \"cancelled\",\n]);\n\nexport const projectPriorityEnum = pgEnum(\"project_priority\", [\n  \"low\",\n  \"medium\",\n  \"high\",\n  \"urgent\",\n]);\n\n// Projects table - construction and safety projects\nexport const projects = pgTable(\n  \"projects\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    accountId: uuid(\"account_id\")\n      .notNull()\n      .references(() => accounts.id),\n    ownerId: uuid(\"owner_id\")\n      .notNull()\n      .references(() => userProfiles.id),\n    name: text(\"name\").notNull(),\n    description: text(\"description\"),\n    type: projectTypeEnum(\"type\").notNull(),\n    status: projectStatusEnum(\"status\").default(\"planning\").notNull(),\n    priority: projectPriorityEnum(\"priority\").default(\"medium\").notNull(),\n    startDate: timestamp(\"start_date\"),\n    endDate: timestamp(\"end_date\"),\n    actualStartDate: timestamp(\"actual_start_date\"),\n    actualEndDate: timestamp(\"actual_end_date\"),\n    budget: decimal(\"budget\", { precision: 15, scale: 2 }),\n    actualCost: decimal(\"actual_cost\", { precision: 15, scale: 2 }),\n    currency: text(\"currency\").default(\"USD\").notNull(),\n    location: text(\"location\"), // Project site location\n    safetyRequirements: text(\"safety_requirements\"), // Specific safety requirements\n    complianceStandards: text(\"compliance_standards\"), // Applicable compliance standards\n    deliverables: text(\"deliverables\"), // Project deliverables\n    notes: text(\"notes\"),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n    createdBy: uuid(\"created_by\")\n      .notNull()\n      .references(() => userProfiles.id),\n  },\n  table => ({\n    accountIdIdx: index(\"projects_account_id_idx\").on(table.accountId),\n    ownerIdIdx: index(\"projects_owner_id_idx\").on(table.ownerId),\n    nameIdx: index(\"projects_name_idx\").on(table.name),\n    typeIdx: index(\"projects_type_idx\").on(table.type),\n    statusIdx: index(\"projects_status_idx\").on(table.status),\n    priorityIdx: index(\"projects_priority_idx\").on(table.priority),\n    startDateIdx: index(\"projects_start_date_idx\").on(table.startDate),\n    endDateIdx: index(\"projects_end_date_idx\").on(table.endDate),\n    activeIdx: index(\"projects_active_idx\").on(table.isActive),\n  })\n);\n\n// Type exports\nexport type Project = typeof projects.$inferSelect;\nexport type NewProject = typeof projects.$inferInsert;\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;;;;AAGO,MAAM,kBAAkB,IAAA,+PAAM,EAAC,gBAAgB;IACpD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAEM,MAAM,oBAAoB,IAAA,+PAAM,EAAC,kBAAkB;IACxD;IACA;IACA;IACA;IACA;CACD;AAEM,MAAM,sBAAsB,IAAA,+PAAM,EAAC,oBAAoB;IAC5D;IACA;IACA;IACA;CACD;AAGM,MAAM,WAAW,IAAA,sPAAO,EAC7B,YACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,WAAW,IAAA,6PAAI,EAAC,cACb,OAAO,GACP,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IAC/B,SAAS,IAAA,6PAAI,EAAC,YACX,OAAO,GACP,UAAU,CAAC,IAAM,yLAAY,CAAC,EAAE;IACnC,MAAM,IAAA,6PAAI,EAAC,QAAQ,OAAO;IAC1B,aAAa,IAAA,6PAAI,EAAC;IAClB,MAAM,gBAAgB,QAAQ,OAAO;IACrC,QAAQ,kBAAkB,UAAU,OAAO,CAAC,YAAY,OAAO;IAC/D,UAAU,oBAAoB,YAAY,OAAO,CAAC,UAAU,OAAO;IACnE,WAAW,IAAA,uQAAS,EAAC;IACrB,SAAS,IAAA,uQAAS,EAAC;IACnB,iBAAiB,IAAA,uQAAS,EAAC;IAC3B,eAAe,IAAA,uQAAS,EAAC;IACzB,QAAQ,IAAA,mQAAO,EAAC,UAAU;QAAE,WAAW;QAAI,OAAO;IAAE;IACpD,YAAY,IAAA,mQAAO,EAAC,eAAe;QAAE,WAAW;QAAI,OAAO;IAAE;IAC7D,UAAU,IAAA,6PAAI,EAAC,YAAY,OAAO,CAAC,OAAO,OAAO;IACjD,UAAU,IAAA,6PAAI,EAAC;IACf,oBAAoB,IAAA,6PAAI,EAAC;IACzB,qBAAqB,IAAA,6PAAI,EAAC;IAC1B,cAAc,IAAA,6PAAI,EAAC;IACnB,OAAO,IAAA,6PAAI,EAAC;IACZ,UAAU,IAAA,mQAAO,EAAC,aAAa,OAAO,CAAC,MAAM,OAAO;IACpD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,6PAAI,EAAC,cACb,OAAO,GACP,UAAU,CAAC,IAAM,yLAAY,CAAC,EAAE;AACrC,GACA,CAAA,QAAS,CAAC;QACR,cAAc,IAAA,sPAAK,EAAC,2BAA2B,EAAE,CAAC,MAAM,SAAS;QACjE,YAAY,IAAA,sPAAK,EAAC,yBAAyB,EAAE,CAAC,MAAM,OAAO;QAC3D,SAAS,IAAA,sPAAK,EAAC,qBAAqB,EAAE,CAAC,MAAM,IAAI;QACjD,SAAS,IAAA,sPAAK,EAAC,qBAAqB,EAAE,CAAC,MAAM,IAAI;QACjD,WAAW,IAAA,sPAAK,EAAC,uBAAuB,EAAE,CAAC,MAAM,MAAM;QACvD,aAAa,IAAA,sPAAK,EAAC,yBAAyB,EAAE,CAAC,MAAM,QAAQ;QAC7D,cAAc,IAAA,sPAAK,EAAC,2BAA2B,EAAE,CAAC,MAAM,SAAS;QACjE,YAAY,IAAA,sPAAK,EAAC,yBAAyB,EAAE,CAAC,MAAM,OAAO;QAC3D,WAAW,IAAA,sPAAK,EAAC,uBAAuB,EAAE,CAAC,MAAM,QAAQ;IAC3D,CAAC","debugId":null}},
    {"offset": {"line": 1461, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/course-translations.ts"],"sourcesContent":["import { pgTable, uuid, text, timestamp, pgEnum } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { courses } from \"./courses\";\n\n// Language code enum\nexport const languageCodeEnum = pgEnum(\"language_code\", [\n  \"en\",\n  \"es\",\n  \"fr\",\n  \"de\",\n]);\n\n// Course translations table\nexport const courseTranslations = pgTable(\"course_translations\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  courseId: uuid(\"course_id\")\n    .notNull()\n    .references(() => courses.id, { onDelete: \"cascade\" }),\n  languageCode: languageCodeEnum(\"language_code\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const courseTranslationsRelations = relations(\n  courseTranslations,\n  ({ one }) => ({\n    course: one(courses, {\n      fields: [courseTranslations.courseId],\n      references: [courses.id],\n    }),\n  })\n);\n\n// Type exports\nexport type CourseTranslation = typeof courseTranslations.$inferSelect;\nexport type NewCourseTranslation = typeof courseTranslations.$inferInsert;\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;AAGO,MAAM,mBAAmB,IAAA,+PAAM,EAAC,iBAAiB;IACtD;IACA;IACA;IACA;CACD;AAGM,MAAM,qBAAqB,IAAA,sPAAO,EAAC,uBAAuB;IAC/D,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,UAAU,IAAA,6PAAI,EAAC,aACZ,OAAO,GACP,UAAU,CAAC,IAAM,2KAAO,CAAC,EAAE,EAAE;QAAE,UAAU;IAAU;IACtD,cAAc,iBAAiB,iBAAiB,OAAO;IACvD,OAAO,IAAA,6PAAI,EAAC,SAAS,OAAO;IAC5B,aAAa,IAAA,6PAAI,EAAC;IAClB,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,8BAA8B,IAAA,8OAAS,EAClD,oBACA,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACZ,QAAQ,IAAI,2KAAO,EAAE;YACnB,QAAQ;gBAAC,mBAAmB,QAAQ;aAAC;YACrC,YAAY;gBAAC,2KAAO,CAAC,EAAE;aAAC;QAC1B;IACF,CAAC","debugId":null}},
    {"offset": {"line": 1510, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/quiz-question-translations.ts"],"sourcesContent":["import { pgTable, uuid, text, jsonb, timestamp } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { quizQuestions } from \"./quiz-questions\";\nimport { languageCodeEnum } from \"./course-translations\";\n\n// Quiz question translations table\nexport const quizQuestionTranslations = pgTable(\"quiz_question_translations\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  quizQuestionId: uuid(\"quiz_question_id\")\n    .notNull()\n    .references(() => quizQuestions.id, { onDelete: \"cascade\" }),\n  languageCode: languageCodeEnum(\"language_code\").notNull(),\n  questionText: text(\"question_text\").notNull(),\n  options: jsonb(\"options\"),\n  correctAnswer: jsonb(\"correct_answer\").notNull(),\n  explanation: text(\"explanation\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const quizQuestionTranslationsRelations = relations(\n  quizQuestionTranslations,\n  ({ one }) => ({\n    quizQuestion: one(quizQuestions, {\n      fields: [quizQuestionTranslations.quizQuestionId],\n      references: [quizQuestions.id],\n    }),\n  })\n);\n\n// Type exports\nexport type QuizQuestionTranslation =\n  typeof quizQuestionTranslations.$inferSelect;\nexport type NewQuizQuestionTranslation =\n  typeof quizQuestionTranslations.$inferInsert;\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;AAGO,MAAM,2BAA2B,IAAA,sPAAO,EAAC,8BAA8B;IAC5E,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,gBAAgB,IAAA,6PAAI,EAAC,oBAClB,OAAO,GACP,UAAU,CAAC,IAAM,2LAAa,CAAC,EAAE,EAAE;QAAE,UAAU;IAAU;IAC5D,cAAc,IAAA,mMAAgB,EAAC,iBAAiB,OAAO;IACvD,cAAc,IAAA,6PAAI,EAAC,iBAAiB,OAAO;IAC3C,SAAS,IAAA,+PAAK,EAAC;IACf,eAAe,IAAA,+PAAK,EAAC,kBAAkB,OAAO;IAC9C,aAAa,IAAA,6PAAI,EAAC;IAClB,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,oCAAoC,IAAA,8OAAS,EACxD,0BACA,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACZ,cAAc,IAAI,2LAAa,EAAE;YAC/B,QAAQ;gBAAC,yBAAyB,cAAc;aAAC;YACjD,YAAY;gBAAC,2LAAa,CAAC,EAAE;aAAC;QAChC;IACF,CAAC","debugId":null}},
    {"offset": {"line": 1555, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/quiz-questions.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  integer,\n  jsonb,\n  pgEnum,\n  unique,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { courseSections } from \"./course-sections\";\n\n// Question type enum\nexport const questionTypeEnum = pgEnum(\"question_type\", [\n  \"true-false\",\n  \"multiple-choice\",\n]);\n\n// Quiz questions table\nexport const quizQuestions = pgTable(\n  \"quiz_questions\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    sectionId: uuid(\"section_id\")\n      .notNull()\n      .references(() => courseSections.id, { onDelete: \"cascade\" }),\n    questionKey: text(\"question_key\").notNull(),\n    questionType: questionTypeEnum(\"question_type\").notNull(),\n    questionText: text(\"question_text\").notNull(),\n    options: jsonb(\"options\"),\n    correctAnswer: jsonb(\"correct_answer\").notNull(),\n    explanation: text(\"explanation\"),\n    orderIndex: integer(\"order_index\").default(0).notNull(),\n    isPublished: boolean(\"is_published\").default(false).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  },\n  table => ({\n    sectionKeyUnique: unique(\"quiz_questions_section_key_unique\").on(\n      table.sectionId,\n      table.questionKey\n    ),\n  })\n);\n\n// Relations\nexport const quizQuestionsRelations = relations(\n  quizQuestions,\n  ({ one, many }) => ({\n    section: one(courseSections, {\n      fields: [quizQuestions.sectionId],\n      references: [courseSections.id],\n    }),\n    quizAttempts: many(quizAttempts),\n    quizQuestionTranslations: many(quizQuestionTranslations),\n  })\n);\n\n// Type exports\nexport type QuizQuestion = typeof quizQuestions.$inferSelect;\nexport type NewQuizQuestion = typeof quizQuestions.$inferInsert;\n\n// Import other tables for relations (circular import handling)\nimport { quizAttempts } from \"./quiz-attempts\";\nimport { quizQuestionTranslations } from \"./quiz-question-translations\";\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAoDA,+DAA+D;AAC/D;AACA;;;;AAnDO,MAAM,mBAAmB,IAAA,+PAAM,EAAC,iBAAiB;IACtD;IACA;CACD;AAGM,MAAM,gBAAgB,IAAA,sPAAO,EAClC,kBACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,WAAW,IAAA,6PAAI,EAAC,cACb,OAAO,GACP,UAAU,CAAC,IAAM,6LAAc,CAAC,EAAE,EAAE;QAAE,UAAU;IAAU;IAC7D,aAAa,IAAA,6PAAI,EAAC,gBAAgB,OAAO;IACzC,cAAc,iBAAiB,iBAAiB,OAAO;IACvD,cAAc,IAAA,6PAAI,EAAC,iBAAiB,OAAO;IAC3C,SAAS,IAAA,+PAAK,EAAC;IACf,eAAe,IAAA,+PAAK,EAAC,kBAAkB,OAAO;IAC9C,aAAa,IAAA,6PAAI,EAAC;IAClB,YAAY,IAAA,mQAAO,EAAC,eAAe,OAAO,CAAC,GAAG,OAAO;IACrD,aAAa,IAAA,mQAAO,EAAC,gBAAgB,OAAO,CAAC,OAAO,OAAO;IAC3D,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GACA,CAAA,QAAS,CAAC;QACR,kBAAkB,IAAA,oQAAM,EAAC,qCAAqC,EAAE,CAC9D,MAAM,SAAS,EACf,MAAM,WAAW;IAErB,CAAC;AAII,MAAM,yBAAyB,IAAA,8OAAS,EAC7C,eACA,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAK,CAAC;QAClB,SAAS,IAAI,6LAAc,EAAE;YAC3B,QAAQ;gBAAC,cAAc,SAAS;aAAC;YACjC,YAAY;gBAAC,6LAAc,CAAC,EAAE;aAAC;QACjC;QACA,cAAc,KAAK,yLAAY;QAC/B,0BAA0B,KAAK,qNAAwB;IACzD,CAAC","debugId":null}},
    {"offset": {"line": 1620, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/quiz-attempts.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  jsonb,\n  boolean,\n  timestamp,\n  integer,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { quizQuestions } from \"./quiz-questions\";\n\n// Interaction type enum\nexport const interactionTypeEnum = pgEnum(\"interaction_type\", [\n  \"view\",\n  \"click\",\n  \"expand\",\n  \"collapse\",\n  \"download\",\n  \"share\",\n]);\n\n// Quiz attempts table\nexport const quizAttempts = pgTable(\"quiz_attempts\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: text(\"user_id\").notNull(),\n  quizQuestionId: uuid(\"quiz_question_id\")\n    .notNull()\n    .references(() => quizQuestions.id, { onDelete: \"cascade\" }),\n  userAnswer: jsonb(\"user_answer\").notNull(),\n  isCorrect: boolean(\"is_correct\").notNull(),\n  attemptedAt: timestamp(\"attempted_at\").defaultNow().notNull(),\n  timeSpentSeconds: integer(\"time_spent_seconds\").default(0).notNull(),\n});\n\n// Relations\nexport const quizAttemptsRelations = relations(quizAttempts, ({ one }) => ({\n  quizQuestion: one(quizQuestions, {\n    fields: [quizAttempts.quizQuestionId],\n    references: [quizQuestions.id],\n  }),\n}));\n\n// Type exports\nexport type QuizAttempt = typeof quizAttempts.$inferSelect;\nexport type NewQuizAttempt = typeof quizAttempts.$inferInsert;\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;;;;AAGO,MAAM,sBAAsB,IAAA,+PAAM,EAAC,oBAAoB;IAC5D;IACA;IACA;IACA;IACA;IACA;CACD;AAGM,MAAM,eAAe,IAAA,sPAAO,EAAC,iBAAiB;IACnD,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,6PAAI,EAAC,WAAW,OAAO;IAC/B,gBAAgB,IAAA,6PAAI,EAAC,oBAClB,OAAO,GACP,UAAU,CAAC,IAAM,2LAAa,CAAC,EAAE,EAAE;QAAE,UAAU;IAAU;IAC5D,YAAY,IAAA,+PAAK,EAAC,eAAe,OAAO;IACxC,WAAW,IAAA,mQAAO,EAAC,cAAc,OAAO;IACxC,aAAa,IAAA,uQAAS,EAAC,gBAAgB,UAAU,GAAG,OAAO;IAC3D,kBAAkB,IAAA,mQAAO,EAAC,sBAAsB,OAAO,CAAC,GAAG,OAAO;AACpE;AAGO,MAAM,wBAAwB,IAAA,8OAAS,EAAC,cAAc,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACzE,cAAc,IAAI,2LAAa,EAAE;YAC/B,QAAQ;gBAAC,aAAa,cAAc;aAAC;YACrC,YAAY;gBAAC,2LAAa,CAAC,EAAE;aAAC;QAChC;IACF,CAAC","debugId":null}},
    {"offset": {"line": 1674, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/content-interactions.ts"],"sourcesContent":["import { pgTable, uuid, text, jsonb, timestamp } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { contentBlocks } from \"./content-blocks\";\nimport { interactionTypeEnum } from \"./quiz-attempts\";\n\n// Content interactions table\nexport const contentInteractions = pgTable(\"content_interactions\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: text(\"user_id\").notNull(),\n  contentBlockId: uuid(\"content_block_id\")\n    .notNull()\n    .references(() => contentBlocks.id, { onDelete: \"cascade\" }),\n  interactionType: interactionTypeEnum(\"interaction_type\").notNull(),\n  metadata: jsonb(\"metadata\"),\n  interactedAt: timestamp(\"interacted_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const contentInteractionsRelations = relations(\n  contentInteractions,\n  ({ one }) => ({\n    contentBlock: one(contentBlocks, {\n      fields: [contentInteractions.contentBlockId],\n      references: [contentBlocks.id],\n    }),\n  })\n);\n\n// Type exports\nexport type ContentInteraction = typeof contentInteractions.$inferSelect;\nexport type NewContentInteraction = typeof contentInteractions.$inferInsert;\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;AAGO,MAAM,sBAAsB,IAAA,sPAAO,EAAC,wBAAwB;IACjE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,6PAAI,EAAC,WAAW,OAAO;IAC/B,gBAAgB,IAAA,6PAAI,EAAC,oBAClB,OAAO,GACP,UAAU,CAAC,IAAM,2LAAa,CAAC,EAAE,EAAE;QAAE,UAAU;IAAU;IAC5D,iBAAiB,IAAA,gMAAmB,EAAC,oBAAoB,OAAO;IAChE,UAAU,IAAA,+PAAK,EAAC;IAChB,cAAc,IAAA,uQAAS,EAAC,iBAAiB,UAAU,GAAG,OAAO;AAC/D;AAGO,MAAM,+BAA+B,IAAA,8OAAS,EACnD,qBACA,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACZ,cAAc,IAAI,2LAAa,EAAE;YAC/B,QAAQ;gBAAC,oBAAoB,cAAc;aAAC;YAC5C,YAAY;gBAAC,2LAAa,CAAC,EAAE;aAAC;QAChC;IACF,CAAC","debugId":null}},
    {"offset": {"line": 1716, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/content-block-translations.ts"],"sourcesContent":["import { pgTable, uuid, jsonb, timestamp } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { contentBlocks } from \"./content-blocks\";\nimport { languageCodeEnum } from \"./course-translations\";\n\n// Content block translations table\nexport const contentBlockTranslations = pgTable(\"content_block_translations\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  contentBlockId: uuid(\"content_block_id\")\n    .notNull()\n    .references(() => contentBlocks.id, { onDelete: \"cascade\" }),\n  languageCode: languageCodeEnum(\"language_code\").notNull(),\n  content: jsonb(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const contentBlockTranslationsRelations = relations(\n  contentBlockTranslations,\n  ({ one }) => ({\n    contentBlock: one(contentBlocks, {\n      fields: [contentBlockTranslations.contentBlockId],\n      references: [contentBlocks.id],\n    }),\n  })\n);\n\n// Type exports\nexport type ContentBlockTranslation =\n  typeof contentBlockTranslations.$inferSelect;\nexport type NewContentBlockTranslation =\n  typeof contentBlockTranslations.$inferInsert;\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;AAGO,MAAM,2BAA2B,IAAA,sPAAO,EAAC,8BAA8B;IAC5E,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,gBAAgB,IAAA,6PAAI,EAAC,oBAClB,OAAO,GACP,UAAU,CAAC,IAAM,2LAAa,CAAC,EAAE,EAAE;QAAE,UAAU;IAAU;IAC5D,cAAc,IAAA,mMAAgB,EAAC,iBAAiB,OAAO;IACvD,SAAS,IAAA,+PAAK,EAAC,WAAW,OAAO;IACjC,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,oCAAoC,IAAA,8OAAS,EACxD,0BACA,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACZ,cAAc,IAAI,2LAAa,EAAE;YAC/B,QAAQ;gBAAC,yBAAyB,cAAc;aAAC;YACjD,YAAY;gBAAC,2LAAa,CAAC,EAAE;aAAC;QAChC;IACF,CAAC","debugId":null}},
    {"offset": {"line": 1757, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/content-blocks.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  integer,\n  jsonb,\n  pgEnum,\n  unique,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { courseSections } from \"./course-sections\";\n\n// Content block type enum\nexport const contentBlockTypeEnum = pgEnum(\"content_block_type\", [\n  \"hero\",\n  \"text\",\n  \"card\",\n  \"image\",\n  \"table\",\n  \"list\",\n  \"grid\",\n  \"callout\",\n  \"quote\",\n  \"divider\",\n  \"video\",\n  \"audio\",\n]);\n\n// Content blocks table\nexport const contentBlocks = pgTable(\n  \"content_blocks\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    sectionId: uuid(\"section_id\")\n      .notNull()\n      .references(() => courseSections.id, { onDelete: \"cascade\" }),\n    blockType: contentBlockTypeEnum(\"block_type\").notNull(),\n    orderIndex: integer(\"order_index\").notNull(),\n    content: jsonb(\"content\").notNull(),\n    metadata: jsonb(\"metadata\"),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  },\n  table => ({\n    sectionOrderUnique: unique(\"content_blocks_section_order_unique\").on(\n      table.sectionId,\n      table.orderIndex\n    ),\n  })\n);\n\n// Relations\nexport const contentBlocksRelations = relations(\n  contentBlocks,\n  ({ one, many }) => ({\n    section: one(courseSections, {\n      fields: [contentBlocks.sectionId],\n      references: [courseSections.id],\n    }),\n    contentInteractions: many(contentInteractions),\n    contentBlockTranslations: many(contentBlockTranslations),\n  })\n);\n\n// Type exports\nexport type ContentBlock = typeof contentBlocks.$inferSelect;\nexport type NewContentBlock = typeof contentBlocks.$inferInsert;\nexport type ContentBlockType = (typeof contentBlockTypeEnum.enumValues)[number];\n\n// Import other tables for relations (circular import handling)\nimport { contentInteractions } from \"./content-interactions\";\nimport { contentBlockTranslations } from \"./content-block-translations\";\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AA2DA,+DAA+D;AAC/D;AACA;;;;AA1DO,MAAM,uBAAuB,IAAA,+PAAM,EAAC,sBAAsB;IAC/D;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAGM,MAAM,gBAAgB,IAAA,sPAAO,EAClC,kBACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,WAAW,IAAA,6PAAI,EAAC,cACb,OAAO,GACP,UAAU,CAAC,IAAM,6LAAc,CAAC,EAAE,EAAE;QAAE,UAAU;IAAU;IAC7D,WAAW,qBAAqB,cAAc,OAAO;IACrD,YAAY,IAAA,mQAAO,EAAC,eAAe,OAAO;IAC1C,SAAS,IAAA,+PAAK,EAAC,WAAW,OAAO;IACjC,UAAU,IAAA,+PAAK,EAAC;IAChB,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GACA,CAAA,QAAS,CAAC;QACR,oBAAoB,IAAA,oQAAM,EAAC,uCAAuC,EAAE,CAClE,MAAM,SAAS,EACf,MAAM,UAAU;IAEpB,CAAC;AAII,MAAM,yBAAyB,IAAA,8OAAS,EAC7C,eACA,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAK,CAAC;QAClB,SAAS,IAAI,6LAAc,EAAE;YAC3B,QAAQ;gBAAC,cAAc,SAAS;aAAC;YACjC,YAAY;gBAAC,6LAAc,CAAC,EAAE;aAAC;QACjC;QACA,qBAAqB,KAAK,uMAAmB;QAC7C,0BAA0B,KAAK,qNAAwB;IACzD,CAAC","debugId":null}},
    {"offset": {"line": 1826, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/user-progress.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  integer,\n  unique,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { courses } from \"./courses\";\nimport { courseSections } from \"./course-sections\";\n\n// User progress table\nexport const userProgress = pgTable(\n  \"user_progress\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    userId: text(\"user_id\").notNull(),\n    courseId: uuid(\"course_id\")\n      .notNull()\n      .references(() => courses.id, { onDelete: \"cascade\" }),\n    sectionId: uuid(\"section_id\")\n      .notNull()\n      .references(() => courseSections.id, { onDelete: \"cascade\" }),\n    isCompleted: boolean(\"is_completed\").default(false).notNull(),\n    completionPercentage: integer(\"completion_percentage\").default(0).notNull(),\n    timeSpentSeconds: integer(\"time_spent_seconds\").default(0).notNull(),\n    lastAccessedAt: timestamp(\"last_accessed_at\").defaultNow().notNull(),\n    completedAt: timestamp(\"completed_at\"),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  },\n  table => ({\n    userSectionUnique: unique(\"user_progress_user_section_unique\").on(\n      table.userId,\n      table.sectionId\n    ),\n  })\n);\n\n// Relations\nexport const userProgressRelations = relations(userProgress, ({ one }) => ({\n  course: one(courses, {\n    fields: [userProgress.courseId],\n    references: [courses.id],\n  }),\n  section: one(courseSections, {\n    fields: [userProgress.sectionId],\n    references: [courseSections.id],\n  }),\n}));\n\n// Type exports\nexport type UserProgress = typeof userProgress.$inferSelect;\nexport type NewUserProgress = typeof userProgress.$inferInsert;\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;;;;;AAGO,MAAM,eAAe,IAAA,sPAAO,EACjC,iBACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,6PAAI,EAAC,WAAW,OAAO;IAC/B,UAAU,IAAA,6PAAI,EAAC,aACZ,OAAO,GACP,UAAU,CAAC,IAAM,2KAAO,CAAC,EAAE,EAAE;QAAE,UAAU;IAAU;IACtD,WAAW,IAAA,6PAAI,EAAC,cACb,OAAO,GACP,UAAU,CAAC,IAAM,6LAAc,CAAC,EAAE,EAAE;QAAE,UAAU;IAAU;IAC7D,aAAa,IAAA,mQAAO,EAAC,gBAAgB,OAAO,CAAC,OAAO,OAAO;IAC3D,sBAAsB,IAAA,mQAAO,EAAC,yBAAyB,OAAO,CAAC,GAAG,OAAO;IACzE,kBAAkB,IAAA,mQAAO,EAAC,sBAAsB,OAAO,CAAC,GAAG,OAAO;IAClE,gBAAgB,IAAA,uQAAS,EAAC,oBAAoB,UAAU,GAAG,OAAO;IAClE,aAAa,IAAA,uQAAS,EAAC;IACvB,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GACA,CAAA,QAAS,CAAC;QACR,mBAAmB,IAAA,oQAAM,EAAC,qCAAqC,EAAE,CAC/D,MAAM,MAAM,EACZ,MAAM,SAAS;IAEnB,CAAC;AAII,MAAM,wBAAwB,IAAA,8OAAS,EAAC,cAAc,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACzE,QAAQ,IAAI,2KAAO,EAAE;YACnB,QAAQ;gBAAC,aAAa,QAAQ;aAAC;YAC/B,YAAY;gBAAC,2KAAO,CAAC,EAAE;aAAC;QAC1B;QACA,SAAS,IAAI,6LAAc,EAAE;YAC3B,QAAQ;gBAAC,aAAa,SAAS;aAAC;YAChC,YAAY;gBAAC,6LAAc,CAAC,EAAE;aAAC;QACjC;IACF,CAAC","debugId":null}},
    {"offset": {"line": 1887, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/section-translations.ts"],"sourcesContent":["import { pgTable, uuid, text, timestamp } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { courseSections } from \"./course-sections\";\nimport { languageCodeEnum } from \"./course-translations\";\n\n// Section translations table\nexport const sectionTranslations = pgTable(\"section_translations\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  sectionId: uuid(\"section_id\")\n    .notNull()\n    .references(() => courseSections.id, { onDelete: \"cascade\" }),\n  languageCode: languageCodeEnum(\"language_code\").notNull(),\n  title: text(\"title\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const sectionTranslationsRelations = relations(\n  sectionTranslations,\n  ({ one }) => ({\n    section: one(courseSections, {\n      fields: [sectionTranslations.sectionId],\n      references: [courseSections.id],\n    }),\n  })\n);\n\n// Type exports\nexport type SectionTranslation = typeof sectionTranslations.$inferSelect;\nexport type NewSectionTranslation = typeof sectionTranslations.$inferInsert;\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;AAGO,MAAM,sBAAsB,IAAA,sPAAO,EAAC,wBAAwB;IACjE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,WAAW,IAAA,6PAAI,EAAC,cACb,OAAO,GACP,UAAU,CAAC,IAAM,6LAAc,CAAC,EAAE,EAAE;QAAE,UAAU;IAAU;IAC7D,cAAc,IAAA,mMAAgB,EAAC,iBAAiB,OAAO;IACvD,OAAO,IAAA,6PAAI,EAAC,SAAS,OAAO;IAC5B,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,+BAA+B,IAAA,8OAAS,EACnD,qBACA,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACZ,SAAS,IAAI,6LAAc,EAAE;YAC3B,QAAQ;gBAAC,oBAAoB,SAAS;aAAC;YACvC,YAAY;gBAAC,6LAAc,CAAC,EAAE;aAAC;QACjC;IACF,CAAC","debugId":null}},
    {"offset": {"line": 1928, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/course-sections.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  integer,\n  unique,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { courses } from \"./courses\";\n\n// Course sections table\nexport const courseSections = pgTable(\n  \"course_sections\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    courseId: uuid(\"course_id\")\n      .notNull()\n      .references(() => courses.id, { onDelete: \"cascade\" }),\n    sectionKey: text(\"section_key\").notNull(),\n    title: text(\"title\").notNull(),\n    orderIndex: integer(\"order_index\").notNull(),\n    iconName: text(\"icon_name\"),\n    isPublished: boolean(\"is_published\").default(false).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  },\n  table => ({\n    courseSectionUnique: unique(\"course_sections_course_section_unique\").on(\n      table.courseId,\n      table.sectionKey\n    ),\n    courseOrderUnique: unique(\"course_sections_course_order_unique\").on(\n      table.courseId,\n      table.orderIndex\n    ),\n  })\n);\n\n// Relations\nexport const courseSectionsRelations = relations(\n  courseSections,\n  ({ one, many }) => ({\n    course: one(courses, {\n      fields: [courseSections.courseId],\n      references: [courses.id],\n    }),\n    contentBlocks: many(contentBlocks),\n    quizQuestions: many(quizQuestions),\n    userProgress: many(userProgress),\n    sectionTranslations: many(sectionTranslations),\n  })\n);\n\n// Type exports\nexport type CourseSection = typeof courseSections.$inferSelect;\nexport type NewCourseSection = typeof courseSections.$inferInsert;\n\n// Import other tables for relations (circular import handling)\nimport { contentBlocks } from \"./content-blocks\";\nimport { quizQuestions } from \"./quiz-questions\";\nimport { userProgress } from \"./user-progress\";\nimport { sectionTranslations } from \"./section-translations\";\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAiDA,+DAA+D;AAC/D;AACA;AACA;AACA;;;;AAlDO,MAAM,iBAAiB,IAAA,sPAAO,EACnC,mBACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,UAAU,IAAA,6PAAI,EAAC,aACZ,OAAO,GACP,UAAU,CAAC,IAAM,2KAAO,CAAC,EAAE,EAAE;QAAE,UAAU;IAAU;IACtD,YAAY,IAAA,6PAAI,EAAC,eAAe,OAAO;IACvC,OAAO,IAAA,6PAAI,EAAC,SAAS,OAAO;IAC5B,YAAY,IAAA,mQAAO,EAAC,eAAe,OAAO;IAC1C,UAAU,IAAA,6PAAI,EAAC;IACf,aAAa,IAAA,mQAAO,EAAC,gBAAgB,OAAO,CAAC,OAAO,OAAO;IAC3D,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GACA,CAAA,QAAS,CAAC;QACR,qBAAqB,IAAA,oQAAM,EAAC,yCAAyC,EAAE,CACrE,MAAM,QAAQ,EACd,MAAM,UAAU;QAElB,mBAAmB,IAAA,oQAAM,EAAC,uCAAuC,EAAE,CACjE,MAAM,QAAQ,EACd,MAAM,UAAU;IAEpB,CAAC;AAII,MAAM,0BAA0B,IAAA,8OAAS,EAC9C,gBACA,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAK,CAAC;QAClB,QAAQ,IAAI,2KAAO,EAAE;YACnB,QAAQ;gBAAC,eAAe,QAAQ;aAAC;YACjC,YAAY;gBAAC,2KAAO,CAAC,EAAE;aAAC;QAC1B;QACA,eAAe,KAAK,2LAAa;QACjC,eAAe,KAAK,2LAAa;QACjC,cAAc,KAAK,yLAAY;QAC/B,qBAAqB,KAAK,uMAAmB;IAC/C,CAAC","debugId":null}},
    {"offset": {"line": 1989, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/schema/index.ts"],"sourcesContent":["// Safety Training Schema Index\n// This file exports all safety training-related tables while preserving existing Supabase auth tables\n\n// Core Safety Training Tables (existing)\nexport * from \"./profiles\";\nexport * from \"./plants\";\nexport * from \"./courses\";\nexport * from \"./enrollments\";\nexport * from \"./progress\";\nexport * from \"./activity-events\";\nexport * from \"./question-events\";\nexport * from \"./admin-roles\";\nexport * from \"./audit-log\";\n\n// New Safety Business Tables (CRM-focused for safety operations)\nexport * from \"./territories\";\nexport * from \"./user-profiles\";\nexport * from \"./accounts\";\nexport * from \"./branches\";\nexport * from \"./contacts\";\nexport * from \"./activity-logs\";\nexport * from \"./opportunities\";\nexport * from \"./sales-facts\";\nexport * from \"./products\";\nexport * from \"./projects\";\n\n// LMS Content Tables (new)\nexport * from \"./course-sections\";\nexport * from \"./content-blocks\";\nexport * from \"./quiz-questions\";\nexport * from \"./course-translations\";\nexport * from \"./section-translations\";\nexport * from \"./content-block-translations\";\nexport * from \"./quiz-question-translations\";\nexport * from \"./user-progress\";\nexport * from \"./quiz-attempts\";\nexport * from \"./content-interactions\";\n\n// Relations for type-safe joins\n// Relations are defined in individual schema files\n\n// Re-export any existing tables that might be needed\n// Note: We don't modify existing Supabase auth tables (users, sessions, etc.)\n"],"names":[],"mappings":"AAAA,+BAA+B;AAC/B,sGAAsG;AAEtG,yCAAyC;;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gTAEA,gCAAgC;CAChC,mDAAmD;CAEnD,qDAAqD;CACrD,8EAA8E","debugId":null}},
    {"offset": {"line": 2252, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/index.ts"],"sourcesContent":["import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport * as schema from \"./schema/index\";\n\n/**\n * Safety Training Database Connection Setup\n *\n * This connects to the existing Supabase Safety database using Drizzle ORM\n * while preserving all existing Supabase auth tables and safety training tables.\n *\n * Environment Variables Required:\n * - DATABASE_URL: PostgreSQL connection string from Supabase Safety project\n * - NEXT_PUBLIC_SUPABASE_URL: Supabase project URL\n * - NEXT_PUBLIC_SUPABASE_ANON_KEY: Supabase anonymous key\n */\nconst connectionString = process.env.DATABASE_URL!;\n\nif (!connectionString) {\n  throw new Error(\"DATABASE_URL environment variable is required\");\n}\n\n// Validate that we're connecting to the Safety database\nif (!connectionString.includes(\"radbukphijxenmgiljtu\")) {\n  console.warn(\n    \"Warning: DATABASE_URL does not point to the Safety database (radbukphijxenmgiljtu)\"\n  );\n}\n\nconst client = postgres(connectionString, {\n  // Connection pool settings for better performance\n  max: 20,\n  idle_timeout: 20,\n  connect_timeout: 10,\n  // Enable SSL for Supabase\n  ssl: \"require\",\n});\n\nexport const db = drizzle(client, {\n  schema,\n  // Enable logging in development\n  logger: process.env.NODE_ENV === \"development\",\n});\n\n// Export schema for use in other parts of the application\nexport * from \"./schema\";\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AAAA;;;;AAEA;;;;;;;;;;CAUC,GACD,MAAM,mBAAmB,QAAQ,GAAG,CAAC,YAAY;AAEjD,IAAI,CAAC,kBAAkB;IACrB,MAAM,IAAI,MAAM;AAClB;AAEA,wDAAwD;AACxD,IAAI,CAAC,iBAAiB,QAAQ,CAAC,yBAAyB;IACtD,QAAQ,IAAI,CACV;AAEJ;AAEA,MAAM,SAAS,IAAA,0MAAQ,EAAC,kBAAkB;IACxC,kDAAkD;IAClD,KAAK;IACL,cAAc;IACd,iBAAiB;IACjB,0BAA0B;IAC1B,KAAK;AACP;AAEO,MAAM,KAAK,IAAA,2PAAO,EAAC,QAAQ;IAChC,QAAA;IACA,gCAAgC;IAChC,QAAQ,oDAAyB;AACnC","debugId":null}},
    {"offset": {"line": 2299, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/queries/course-sections.ts"],"sourcesContent":["import { eq, and, desc, asc, sql } from \"drizzle-orm\";\nimport { db } from \"../index\";\nimport {\n  courseSections,\n  courses,\n  contentBlocks,\n  quizQuestions,\n  CourseSection,\n  NewCourseSection,\n} from \"../schema\";\n\n/**\n * Course Section Query Operations\n * Handles database queries for course sections with proper access control\n */\n\n// =============================================================================\n// BASIC COURSE SECTION QUERIES\n// =============================================================================\n\n/**\n * Get course section by ID\n */\nexport const getCourseSectionById = async (\n  sectionId: string\n): Promise<CourseSection | null> => {\n  const result = await db\n    .select()\n    .from(courseSections)\n    .where(eq(courseSections.id, sectionId))\n    .limit(1);\n\n  return result[0] || null;\n};\n\n/**\n * Get course section by course ID and section key\n */\nexport const getCourseSectionByKey = async (\n  courseId: string,\n  sectionKey: string\n): Promise<CourseSection | null> => {\n  const result = await db\n    .select()\n    .from(courseSections)\n    .where(\n      and(\n        eq(courseSections.courseId, courseId),\n        eq(courseSections.sectionKey, sectionKey)\n      )\n    )\n    .limit(1);\n\n  return result[0] || null;\n};\n\n/**\n * Get all sections for a course\n */\nexport const getCourseSectionsByCourseId = async (\n  courseId: string,\n  options: {\n    includeUnpublished?: boolean;\n    sortBy?: \"orderIndex\" | \"title\" | \"createdAt\";\n    sortOrder?: \"asc\" | \"desc\";\n  } = {}\n): Promise<CourseSection[]> => {\n  const {\n    includeUnpublished = false,\n    sortBy = \"orderIndex\",\n    sortOrder = \"asc\",\n  } = options;\n\n  let whereClause = eq(courseSections.courseId, courseId);\n\n  if (!includeUnpublished) {\n    whereClause = and(whereClause, eq(courseSections.isPublished, true));\n  }\n\n  const orderBy =\n    sortOrder === \"desc\"\n      ? desc(courseSections[sortBy])\n      : asc(courseSections[sortBy]);\n\n  const result = await db\n    .select()\n    .from(courseSections)\n    .where(whereClause)\n    .orderBy(orderBy);\n\n  return result;\n};\n\n/**\n * Get course sections with content blocks and quiz questions\n */\nexport const getCourseSectionWithContent = async (\n  sectionId: string\n): Promise<{\n  section: CourseSection;\n  contentBlocks: any[];\n  quizQuestions: any[];\n} | null> => {\n  const section = await getCourseSectionById(sectionId);\n  if (!section) return null;\n\n  // Get content blocks\n  const blocks = await db\n    .select()\n    .from(contentBlocks)\n    .where(eq(contentBlocks.sectionId, sectionId))\n    .orderBy(asc(contentBlocks.orderIndex));\n\n  // Get quiz questions\n  const questions = await db\n    .select()\n    .from(quizQuestions)\n    .where(eq(quizQuestions.sectionId, sectionId))\n    .orderBy(asc(quizQuestions.orderIndex));\n\n  return {\n    section,\n    contentBlocks: blocks,\n    quizQuestions: questions,\n  };\n};\n\n// =============================================================================\n// COURSE SECTION CREATION AND UPDATES\n// =============================================================================\n\n/**\n * Create a new course section\n */\nexport const createCourseSection = async (\n  sectionData: NewCourseSection\n): Promise<CourseSection> => {\n  const result = await db\n    .insert(courseSections)\n    .values(sectionData)\n    .returning();\n\n  return result[0];\n};\n\n/**\n * Update course section\n */\nexport const updateCourseSection = async (\n  sectionId: string,\n  updates: Partial<CourseSection>\n): Promise<CourseSection | null> => {\n  const result = await db\n    .update(courseSections)\n    .set({\n      ...updates,\n      updatedAt: new Date(),\n    })\n    .where(eq(courseSections.id, sectionId))\n    .returning();\n\n  return result[0] || null;\n};\n\n/**\n * Delete course section\n */\nexport const deleteCourseSection = async (\n  sectionId: string\n): Promise<boolean> => {\n  const result = await db\n    .delete(courseSections)\n    .where(eq(courseSections.id, sectionId))\n    .returning();\n\n  return result.length > 0;\n};\n\n// =============================================================================\n// COURSE SECTION ORDERING OPERATIONS\n// =============================================================================\n\n/**\n * Update section order\n */\nexport const updateSectionOrder = async (\n  sectionId: string,\n  newOrderIndex: number\n): Promise<CourseSection | null> => {\n  const result = await db\n    .update(courseSections)\n    .set({\n      orderIndex: newOrderIndex,\n      updatedAt: new Date(),\n    })\n    .where(eq(courseSections.id, sectionId))\n    .returning();\n\n  return result[0] || null;\n};\n\n/**\n * Reorder multiple sections\n */\nexport const reorderSections = async (\n  courseId: string,\n  sectionOrders: Array<{ sectionId: string; orderIndex: number }>\n): Promise<CourseSection[]> => {\n  const results: CourseSection[] = [];\n\n  for (const order of sectionOrders) {\n    const result = await updateSectionOrder(order.sectionId, order.orderIndex);\n    if (result) {\n      results.push(result);\n    }\n  }\n\n  return results;\n};\n\n/**\n * Get next available order index for a course\n */\nexport const getNextSectionOrderIndex = async (\n  courseId: string\n): Promise<number> => {\n  const result = await db\n    .select({ maxOrder: sql<number>`max(${courseSections.orderIndex})` })\n    .from(courseSections)\n    .where(eq(courseSections.courseId, courseId));\n\n  return (result[0]?.maxOrder || 0) + 1;\n};\n\n// =============================================================================\n// COURSE SECTION VALIDATION QUERIES\n// =============================================================================\n\n/**\n * Check if section key is unique within a course\n */\nexport const isSectionKeyUnique = async (\n  courseId: string,\n  sectionKey: string,\n  excludeSectionId?: string\n): Promise<boolean> => {\n  let whereClause = and(\n    eq(courseSections.courseId, courseId),\n    eq(courseSections.sectionKey, sectionKey)\n  );\n\n  if (excludeSectionId) {\n    whereClause = and(\n      whereClause,\n      sql`${courseSections.id} != ${excludeSectionId}`\n    );\n  }\n\n  const result = await db\n    .select({ id: courseSections.id })\n    .from(courseSections)\n    .where(whereClause)\n    .limit(1);\n\n  return result.length === 0;\n};\n\n/**\n * Check if order index is unique within a course\n */\nexport const isOrderIndexUnique = async (\n  courseId: string,\n  orderIndex: number,\n  excludeSectionId?: string\n): Promise<boolean> => {\n  let whereClause = and(\n    eq(courseSections.courseId, courseId),\n    eq(courseSections.orderIndex, orderIndex)\n  );\n\n  if (excludeSectionId) {\n    whereClause = and(\n      whereClause,\n      sql`${courseSections.id} != ${excludeSectionId}`\n    );\n  }\n\n  const result = await db\n    .select({ id: courseSections.id })\n    .from(courseSections)\n    .where(whereClause)\n    .limit(1);\n\n  return result.length === 0;\n};\n\n// =============================================================================\n// COURSE SECTION STATISTICS QUERIES\n// =============================================================================\n\n/**\n * Get section statistics\n */\nexport const getSectionStatistics = async (\n  sectionId: string\n): Promise<{\n  contentBlocksCount: number;\n  quizQuestionsCount: number;\n  publishedContentBlocks: number;\n  publishedQuizQuestions: number;\n} | null> => {\n  const section = await getCourseSectionById(sectionId);\n  if (!section) return null;\n\n  // Count content blocks\n  const contentBlocksResult = await db\n    .select({\n      total: sql<number>`count(*)`,\n      published: sql<number>`count(*) filter (where ${contentBlocks.sectionId} = ${sectionId})`,\n    })\n    .from(contentBlocks)\n    .where(eq(contentBlocks.sectionId, sectionId));\n\n  // Count quiz questions\n  const quizQuestionsResult = await db\n    .select({\n      total: sql<number>`count(*)`,\n      published: sql<number>`count(*) filter (where ${quizQuestions.isPublished} = true)`,\n    })\n    .from(quizQuestions)\n    .where(eq(quizQuestions.sectionId, sectionId));\n\n  return {\n    contentBlocksCount: contentBlocksResult[0]?.total || 0,\n    quizQuestionsCount: quizQuestionsResult[0]?.total || 0,\n    publishedContentBlocks: contentBlocksResult[0]?.published || 0,\n    publishedQuizQuestions: quizQuestionsResult[0]?.published || 0,\n  };\n};\n\n// =============================================================================\n// COURSE SECTION SEARCH QUERIES\n// =============================================================================\n\n/**\n * Search course sections\n */\nexport const searchCourseSections = async (\n  courseId: string,\n  searchTerm: string,\n  options: {\n    includeUnpublished?: boolean;\n    limit?: number;\n    offset?: number;\n  } = {}\n): Promise<CourseSection[]> => {\n  const { includeUnpublished = false, limit = 20, offset = 0 } = options;\n\n  let whereClause = and(\n    eq(courseSections.courseId, courseId),\n    sql`${courseSections.title} ilike ${`%${searchTerm}%`}`\n  );\n\n  if (!includeUnpublished) {\n    whereClause = and(whereClause, eq(courseSections.isPublished, true));\n  }\n\n  const result = await db\n    .select()\n    .from(courseSections)\n    .where(whereClause)\n    .orderBy(asc(courseSections.orderIndex))\n    .limit(limit)\n    .offset(offset);\n\n  return result;\n};\n\n// =============================================================================\n// COURSE SECTION ACCESS CONTROL QUERIES\n// =============================================================================\n\n/**\n * Get sections accessible to user based on role and course access\n */\nexport const getAccessibleCourseSections = async (\n  courseId: string,\n  userRole: string,\n  options: {\n    includeUnpublished?: boolean;\n  } = {}\n): Promise<CourseSection[]> => {\n  const { includeUnpublished = false } = options;\n\n  // Safety admins can access all sections\n  if (userRole === \"safety_admin\") {\n    return getCourseSectionsByCourseId(courseId, { includeUnpublished: true });\n  }\n\n  // Other roles can only access published sections unless explicitly allowed\n  return getCourseSectionsByCourseId(courseId, { includeUnpublished });\n};\n\n/**\n * Check if user can access a specific section\n */\nexport const canUserAccessSection = async (\n  sectionId: string,\n  userRole: string\n): Promise<boolean> => {\n  const section = await getCourseSectionById(sectionId);\n  if (!section) return false;\n\n  // Safety admins can access all sections\n  if (userRole === \"safety_admin\") return true;\n\n  // Other roles can only access published sections\n  return section.isPublished;\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2487, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/queries/content-blocks.ts"],"sourcesContent":["import { eq, and, desc, asc, sql } from \"drizzle-orm\";\nimport { db } from \"../index\";\nimport {\n  contentBlocks,\n  courseSections,\n  ContentBlock,\n  NewContentBlock,\n  ContentBlockType,\n} from \"../schema\";\n\n/**\n * Content Block Query Operations\n * Handles database queries for content blocks with proper access control\n */\n\n// =============================================================================\n// BASIC CONTENT BLOCK QUERIES\n// =============================================================================\n\n/**\n * Get content block by ID\n */\nexport const getContentBlockById = async (\n  blockId: string\n): Promise<ContentBlock | null> => {\n  const result = await db\n    .select()\n    .from(contentBlocks)\n    .where(eq(contentBlocks.id, blockId))\n    .limit(1);\n\n  return result[0] || null;\n};\n\n/**\n * Get all content blocks for a section\n */\nexport const getContentBlocksBySectionId = async (\n  sectionId: string,\n  options: {\n    blockType?: ContentBlockType;\n    sortBy?: \"orderIndex\" | \"blockType\" | \"createdAt\";\n    sortOrder?: \"asc\" | \"desc\";\n  } = {}\n): Promise<ContentBlock[]> => {\n  const { blockType, sortBy = \"orderIndex\", sortOrder = \"asc\" } = options;\n\n  let whereClause = eq(contentBlocks.sectionId, sectionId);\n\n  if (blockType) {\n    whereClause = and(whereClause, eq(contentBlocks.blockType, blockType));\n  }\n\n  const orderBy =\n    sortOrder === \"desc\"\n      ? desc(contentBlocks[sortBy])\n      : asc(contentBlocks[sortBy]);\n\n  const result = await db\n    .select()\n    .from(contentBlocks)\n    .where(whereClause)\n    .orderBy(orderBy);\n\n  return result;\n};\n\n/**\n * Get content blocks by type across all sections\n */\nexport const getContentBlocksByType = async (\n  blockType: ContentBlockType,\n  options: {\n    limit?: number;\n    offset?: number;\n  } = {}\n): Promise<ContentBlock[]> => {\n  const { limit = 20, offset = 0 } = options;\n\n  const result = await db\n    .select()\n    .from(contentBlocks)\n    .where(eq(contentBlocks.blockType, blockType))\n    .orderBy(asc(contentBlocks.createdAt))\n    .limit(limit)\n    .offset(offset);\n\n  return result;\n};\n\n// =============================================================================\n// CONTENT BLOCK CREATION AND UPDATES\n// =============================================================================\n\n/**\n * Create a new content block\n */\nexport const createContentBlock = async (\n  blockData: NewContentBlock\n): Promise<ContentBlock> => {\n  const result = await db.insert(contentBlocks).values(blockData).returning();\n\n  return result[0];\n};\n\n/**\n * Update content block\n */\nexport const updateContentBlock = async (\n  blockId: string,\n  updates: Partial<ContentBlock>\n): Promise<ContentBlock | null> => {\n  const result = await db\n    .update(contentBlocks)\n    .set({\n      ...updates,\n      updatedAt: new Date(),\n    })\n    .where(eq(contentBlocks.id, blockId))\n    .returning();\n\n  return result[0] || null;\n};\n\n/**\n * Delete content block\n */\nexport const deleteContentBlock = async (blockId: string): Promise<boolean> => {\n  const result = await db\n    .delete(contentBlocks)\n    .where(eq(contentBlocks.id, blockId))\n    .returning();\n\n  return result.length > 0;\n};\n\n// =============================================================================\n// CONTENT BLOCK ORDERING OPERATIONS\n// =============================================================================\n\n/**\n * Update content block order\n */\nexport const updateContentBlockOrder = async (\n  blockId: string,\n  newOrderIndex: number\n): Promise<ContentBlock | null> => {\n  const result = await db\n    .update(contentBlocks)\n    .set({\n      orderIndex: newOrderIndex,\n      updatedAt: new Date(),\n    })\n    .where(eq(contentBlocks.id, blockId))\n    .returning();\n\n  return result[0] || null;\n};\n\n/**\n * Reorder multiple content blocks\n */\nexport const reorderContentBlocks = async (\n  sectionId: string,\n  blockOrders: Array<{ blockId: string; orderIndex: number }>\n): Promise<ContentBlock[]> => {\n  const results: ContentBlock[] = [];\n\n  for (const order of blockOrders) {\n    const result = await updateContentBlockOrder(\n      order.blockId,\n      order.orderIndex\n    );\n    if (result) {\n      results.push(result);\n    }\n  }\n\n  return results;\n};\n\n/**\n * Get next available order index for a section\n */\nexport const getNextContentBlockOrderIndex = async (\n  sectionId: string\n): Promise<number> => {\n  const result = await db\n    .select({ maxOrder: sql<number>`max(${contentBlocks.orderIndex})` })\n    .from(contentBlocks)\n    .where(eq(contentBlocks.sectionId, sectionId));\n\n  return (result[0]?.maxOrder || 0) + 1;\n};\n\n// =============================================================================\n// CONTENT BLOCK VALIDATION QUERIES\n// =============================================================================\n\n/**\n * Check if order index is unique within a section\n */\nexport const isContentBlockOrderIndexUnique = async (\n  sectionId: string,\n  orderIndex: number,\n  excludeBlockId?: string\n): Promise<boolean> => {\n  let whereClause = and(\n    eq(contentBlocks.sectionId, sectionId),\n    eq(contentBlocks.orderIndex, orderIndex)\n  );\n\n  if (excludeBlockId) {\n    whereClause = and(\n      whereClause,\n      sql`${contentBlocks.id} != ${excludeBlockId}`\n    );\n  }\n\n  const result = await db\n    .select({ id: contentBlocks.id })\n    .from(contentBlocks)\n    .where(whereClause)\n    .limit(1);\n\n  return result.length === 0;\n};\n\n/**\n * Validate content block content based on block type\n */\nexport const validateContentBlockContent = async (\n  blockType: ContentBlockType,\n  content: Record<string, unknown>\n): Promise<{ isValid: boolean; errors: string[] }> => {\n  const errors: string[] = [];\n\n  switch (blockType) {\n    case \"hero\":\n      if (!content.title) errors.push(\"Hero blocks require a title\");\n      break;\n\n    case \"text\":\n      if (!content.content && !content.text) {\n        errors.push(\"Text blocks require content or text\");\n      }\n      break;\n\n    case \"image\":\n      if (!content.image?.url) {\n        errors.push(\"Image blocks require an image URL\");\n      }\n      break;\n\n    case \"table\":\n      if (!content.table?.headers || !content.table?.rows) {\n        errors.push(\"Table blocks require headers and rows\");\n      }\n      break;\n\n    case \"list\":\n      if (!content.list?.items || !Array.isArray(content.list.items)) {\n        errors.push(\"List blocks require items array\");\n      }\n      break;\n\n    case \"callout\":\n      if (!content.callout?.type || !content.callout?.content) {\n        errors.push(\"Callout blocks require type and content\");\n      }\n      break;\n\n    case \"quote\":\n      if (!content.quote?.text) {\n        errors.push(\"Quote blocks require text\");\n      }\n      break;\n\n    case \"video\":\n      if (!content.video?.url) {\n        errors.push(\"Video blocks require a video URL\");\n      }\n      break;\n\n    case \"audio\":\n      if (!content.audio?.url) {\n        errors.push(\"Audio blocks require an audio URL\");\n      }\n      break;\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n};\n\n// =============================================================================\n// CONTENT BLOCK STATISTICS QUERIES\n// =============================================================================\n\n/**\n * Get content block statistics for a section\n */\nexport const getContentBlockStatistics = async (\n  sectionId: string\n): Promise<{\n  totalBlocks: number;\n  blocksByType: Record<ContentBlockType, number>;\n  blocksWithMetadata: number;\n  blocksWithoutMetadata: number;\n} | null> => {\n  // Get total count\n  const totalResult = await db\n    .select({ count: sql<number>`count(*)` })\n    .from(contentBlocks)\n    .where(eq(contentBlocks.sectionId, sectionId));\n\n  // Get count by type\n  const typeResult = await db\n    .select({\n      blockType: contentBlocks.blockType,\n      count: sql<number>`count(*)`,\n    })\n    .from(contentBlocks)\n    .where(eq(contentBlocks.sectionId, sectionId))\n    .groupBy(contentBlocks.blockType);\n\n  // Get blocks with/without metadata\n  const metadataResult = await db\n    .select({\n      withMetadata: sql<number>`count(*) filter (where ${contentBlocks.metadata} is not null)`,\n      withoutMetadata: sql<number>`count(*) filter (where ${contentBlocks.metadata} is null)`,\n    })\n    .from(contentBlocks)\n    .where(eq(contentBlocks.sectionId, sectionId));\n\n  const blocksByType = typeResult.reduce(\n    (acc, row) => {\n      acc[row.blockType] = row.count;\n      return acc;\n    },\n    {} as Record<ContentBlockType, number>\n  );\n\n  return {\n    totalBlocks: totalResult[0]?.count || 0,\n    blocksByType,\n    blocksWithMetadata: metadataResult[0]?.withMetadata || 0,\n    blocksWithoutMetadata: metadataResult[0]?.withoutMetadata || 0,\n  };\n};\n\n// =============================================================================\n// CONTENT BLOCK SEARCH QUERIES\n// =============================================================================\n\n/**\n * Search content blocks by content\n */\nexport const searchContentBlocks = async (\n  sectionId: string,\n  searchTerm: string,\n  options: {\n    blockType?: ContentBlockType;\n    limit?: number;\n    offset?: number;\n  } = {}\n): Promise<ContentBlock[]> => {\n  const { blockType, limit = 20, offset = 0 } = options;\n\n  let whereClause = and(\n    eq(contentBlocks.sectionId, sectionId),\n    sql`${contentBlocks.content}::text ilike ${`%${searchTerm}%`}`\n  );\n\n  if (blockType) {\n    whereClause = and(whereClause, eq(contentBlocks.blockType, blockType));\n  }\n\n  const result = await db\n    .select()\n    .from(contentBlocks)\n    .where(whereClause)\n    .orderBy(asc(contentBlocks.orderIndex))\n    .limit(limit)\n    .offset(offset);\n\n  return result;\n};\n\n/**\n * Search content blocks across all sections\n */\nexport const searchAllContentBlocks = async (\n  searchTerm: string,\n  options: {\n    blockType?: ContentBlockType;\n    limit?: number;\n    offset?: number;\n  } = {}\n): Promise<ContentBlock[]> => {\n  const { blockType, limit = 20, offset = 0 } = options;\n\n  let whereClause = sql`${contentBlocks.content}::text ilike ${`%${searchTerm}%`}`;\n\n  if (blockType) {\n    whereClause = and(whereClause, eq(contentBlocks.blockType, blockType));\n  }\n\n  const result = await db\n    .select()\n    .from(contentBlocks)\n    .where(whereClause)\n    .orderBy(asc(contentBlocks.createdAt))\n    .limit(limit)\n    .offset(offset);\n\n  return result;\n};\n\n// =============================================================================\n// CONTENT BLOCK ACCESS CONTROL QUERIES\n// =============================================================================\n\n/**\n * Get content blocks accessible to user based on role and section access\n */\nexport const getAccessibleContentBlocks = async (\n  sectionId: string,\n  userRole: string,\n  options: {\n    blockType?: ContentBlockType;\n  } = {}\n): Promise<ContentBlock[]> => {\n  // All roles can access content blocks if they have section access\n  // Access control is handled at the section level\n  return getContentBlocksBySectionId(sectionId, options);\n};\n\n/**\n * Check if user can access a specific content block\n */\nexport const canUserAccessContentBlock = async (\n  blockId: string,\n  userRole: string\n): Promise<boolean> => {\n  const block = await getContentBlockById(blockId);\n  if (!block) return false;\n\n  // Access control is handled at the section level\n  // If user can access the section, they can access the content blocks\n  return true;\n};\n\n// =============================================================================\n// CONTENT BLOCK BULK OPERATIONS\n// =============================================================================\n\n/**\n * Bulk create content blocks\n */\nexport const bulkCreateContentBlocks = async (\n  blocksData: NewContentBlock[]\n): Promise<ContentBlock[]> => {\n  const result = await db.insert(contentBlocks).values(blocksData).returning();\n\n  return result;\n};\n\n/**\n * Bulk update content blocks\n */\nexport const bulkUpdateContentBlocks = async (\n  updates: Array<{ id: string; updates: Partial<ContentBlock> }>\n): Promise<ContentBlock[]> => {\n  const results: ContentBlock[] = [];\n\n  for (const update of updates) {\n    const result = await updateContentBlock(update.id, update.updates);\n    if (result) {\n      results.push(result);\n    }\n  }\n\n  return results;\n};\n\n/**\n * Bulk delete content blocks\n */\nexport const bulkDeleteContentBlocks = async (\n  blockIds: string[]\n): Promise<number> => {\n  const result = await db\n    .delete(contentBlocks)\n    .where(sql`${contentBlocks.id} = any(${blockIds})`)\n    .returning();\n\n  return result.length;\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2733, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/queries/quiz-questions.ts"],"sourcesContent":["import { eq, and, desc, asc, sql } from \"drizzle-orm\";\nimport { db } from \"../index\";\nimport {\n  quizQuestions,\n  quizAttempts,\n  courseSections,\n  QuizQuestion,\n  NewQuizQuestion,\n  questionTypeEnum,\n} from \"../schema\";\n\n/**\n * Quiz Question Query Operations\n * Handles database queries for quiz questions with proper access control\n */\n\n// =============================================================================\n// BASIC QUIZ QUESTION QUERIES\n// =============================================================================\n\n/**\n * Get quiz question by ID\n */\nexport const getQuizQuestionById = async (\n  questionId: string\n): Promise<QuizQuestion | null> => {\n  const result = await db\n    .select()\n    .from(quizQuestions)\n    .where(eq(quizQuestions.id, questionId))\n    .limit(1);\n\n  return result[0] || null;\n};\n\n/**\n * Get quiz question by section ID and question key\n */\nexport const getQuizQuestionByKey = async (\n  sectionId: string,\n  questionKey: string\n): Promise<QuizQuestion | null> => {\n  const result = await db\n    .select()\n    .from(quizQuestions)\n    .where(\n      and(\n        eq(quizQuestions.sectionId, sectionId),\n        eq(quizQuestions.questionKey, questionKey)\n      )\n    )\n    .limit(1);\n\n  return result[0] || null;\n};\n\n/**\n * Get all quiz questions for a section\n */\nexport const getQuizQuestionsBySectionId = async (\n  sectionId: string,\n  options: {\n    questionType?: typeof questionTypeEnum.enumValues[number];\n    includeUnpublished?: boolean;\n    sortBy?: \"orderIndex\" | \"questionKey\" | \"createdAt\";\n    sortOrder?: \"asc\" | \"desc\";\n  } = {}\n): Promise<QuizQuestion[]> => {\n  const {\n    questionType,\n    includeUnpublished = false,\n    sortBy = \"orderIndex\",\n    sortOrder = \"asc\",\n  } = options;\n\n  let whereClause = eq(quizQuestions.sectionId, sectionId);\n\n  if (questionType) {\n    whereClause = and(\n      whereClause,\n      eq(quizQuestions.questionType, questionType)\n    );\n  }\n\n  if (!includeUnpublished) {\n    whereClause = and(whereClause, eq(quizQuestions.isPublished, true));\n  }\n\n  const orderBy =\n    sortOrder === \"desc\"\n      ? desc(quizQuestions[sortBy])\n      : asc(quizQuestions[sortBy]);\n\n  const result = await db\n    .select()\n    .from(quizQuestions)\n    .where(whereClause)\n    .orderBy(orderBy);\n\n  return result;\n};\n\n/**\n * Get quiz questions by type across all sections\n */\nexport const getQuizQuestionsByType = async (\n  questionType: typeof questionTypeEnum.enumValues[number],\n  options: {\n    includeUnpublished?: boolean;\n    limit?: number;\n    offset?: number;\n  } = {}\n): Promise<QuizQuestion[]> => {\n  const { includeUnpublished = false, limit = 20, offset = 0 } = options;\n\n  let whereClause = eq(quizQuestions.questionType, questionType);\n\n  if (!includeUnpublished) {\n    whereClause = and(whereClause, eq(quizQuestions.isPublished, true));\n  }\n\n  const result = await db\n    .select()\n    .from(quizQuestions)\n    .where(whereClause)\n    .orderBy(asc(quizQuestions.createdAt))\n    .limit(limit)\n    .offset(offset);\n\n  return result;\n};\n\n// =============================================================================\n// QUIZ QUESTION CREATION AND UPDATES\n// =============================================================================\n\n/**\n * Create a new quiz question\n */\nexport const createQuizQuestion = async (\n  questionData: NewQuizQuestion\n): Promise<QuizQuestion> => {\n  const result = await db\n    .insert(quizQuestions)\n    .values(questionData)\n    .returning();\n\n  return result[0];\n};\n\n/**\n * Update quiz question\n */\nexport const updateQuizQuestion = async (\n  questionId: string,\n  updates: Partial<QuizQuestion>\n): Promise<QuizQuestion | null> => {\n  const result = await db\n    .update(quizQuestions)\n    .set({\n      ...updates,\n      updatedAt: new Date(),\n    })\n    .where(eq(quizQuestions.id, questionId))\n    .returning();\n\n  return result[0] || null;\n};\n\n/**\n * Delete quiz question\n */\nexport const deleteQuizQuestion = async (\n  questionId: string\n): Promise<boolean> => {\n  const result = await db\n    .delete(quizQuestions)\n    .where(eq(quizQuestions.id, questionId))\n    .returning();\n\n  return result.length > 0;\n};\n\n// =============================================================================\n// QUIZ QUESTION ORDERING OPERATIONS\n// =============================================================================\n\n/**\n * Update quiz question order\n */\nexport const updateQuizQuestionOrder = async (\n  questionId: string,\n  newOrderIndex: number\n): Promise<QuizQuestion | null> => {\n  const result = await db\n    .update(quizQuestions)\n    .set({\n      orderIndex: newOrderIndex,\n      updatedAt: new Date(),\n    })\n    .where(eq(quizQuestions.id, questionId))\n    .returning();\n\n  return result[0] || null;\n};\n\n/**\n * Reorder multiple quiz questions\n */\nexport const reorderQuizQuestions = async (\n  sectionId: string,\n  questionOrders: Array<{ questionId: string; orderIndex: number }>\n): Promise<QuizQuestion[]> => {\n  const results: QuizQuestion[] = [];\n\n  for (const order of questionOrders) {\n    const result = await updateQuizQuestionOrder(\n      order.questionId,\n      order.orderIndex\n    );\n    if (result) {\n      results.push(result);\n    }\n  }\n\n  return results;\n};\n\n/**\n * Get next available order index for a section\n */\nexport const getNextQuizQuestionOrderIndex = async (\n  sectionId: string\n): Promise<number> => {\n  const result = await db\n    .select({ maxOrder: sql<number>`max(${quizQuestions.orderIndex})` })\n    .from(quizQuestions)\n    .where(eq(quizQuestions.sectionId, sectionId));\n\n  return (result[0]?.maxOrder || 0) + 1;\n};\n\n// =============================================================================\n// QUIZ QUESTION VALIDATION QUERIES\n// =============================================================================\n\n/**\n * Check if question key is unique within a section\n */\nexport const isQuestionKeyUnique = async (\n  sectionId: string,\n  questionKey: string,\n  excludeQuestionId?: string\n): Promise<boolean> => {\n  let whereClause = and(\n    eq(quizQuestions.sectionId, sectionId),\n    eq(quizQuestions.questionKey, questionKey)\n  );\n\n  if (excludeQuestionId) {\n    whereClause = and(\n      whereClause,\n      sql`${quizQuestions.id} != ${excludeQuestionId}`\n    );\n  }\n\n  const result = await db\n    .select({ id: quizQuestions.id })\n    .from(quizQuestions)\n    .where(whereClause)\n    .limit(1);\n\n  return result.length === 0;\n};\n\n/**\n * Check if order index is unique within a section\n */\nexport const isQuizQuestionOrderIndexUnique = async (\n  sectionId: string,\n  orderIndex: number,\n  excludeQuestionId?: string\n): Promise<boolean> => {\n  let whereClause = and(\n    eq(quizQuestions.sectionId, sectionId),\n    eq(quizQuestions.orderIndex, orderIndex)\n  );\n\n  if (excludeQuestionId) {\n    whereClause = and(\n      whereClause,\n      sql`${quizQuestions.id} != ${excludeQuestionId}`\n    );\n  }\n\n  const result = await db\n    .select({ id: quizQuestions.id })\n    .from(quizQuestions)\n    .where(whereClause)\n    .limit(1);\n\n  return result.length === 0;\n};\n\n/**\n * Validate quiz question content based on question type\n */\nexport const validateQuizQuestionContent = async (\n  questionType: typeof questionTypeEnum.enumValues[number],\n  questionText: string,\n  options?: Record<string, string>,\n  correctAnswer?: unknown\n): Promise<{ isValid: boolean; errors: string[] }> => {\n  const errors: string[] = [];\n\n  if (!questionText || questionText.trim().length === 0) {\n    errors.push(\"Question text is required\");\n  }\n\n  switch (questionType) {\n    case \"true-false\":\n      if (typeof correctAnswer !== \"boolean\") {\n        errors.push(\"True/false questions require a boolean correct answer\");\n      }\n      break;\n\n    case \"multiple-choice\":\n      if (!options || Object.keys(options).length === 0) {\n        errors.push(\"Multiple choice questions require options\");\n      }\n      if (\n        typeof correctAnswer !== \"string\" ||\n        !options ||\n        !(correctAnswer in options)\n      ) {\n        errors.push(\"Correct answer must be one of the provided options\");\n      }\n      break;\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n};\n\n// =============================================================================\n// QUIZ ATTEMPT QUERIES\n// =============================================================================\n\n/**\n * Create quiz attempt\n */\nexport const createQuizAttempt = async (attemptData: {\n  userId: string;\n  quizQuestionId: string;\n  userAnswer: unknown;\n  isCorrect: boolean;\n  timeSpentSeconds: number;\n}): Promise<any> => {\n  const result = await db\n    .insert(quizAttempts)\n    .values({\n      ...attemptData,\n      attemptedAt: new Date(),\n    })\n    .returning();\n\n  return result[0];\n};\n\n/**\n * Get quiz attempts for a user\n */\nexport const getQuizAttemptsByUser = async (\n  userId: string,\n  options: {\n    quizQuestionId?: string;\n    isCorrect?: boolean;\n    dateFrom?: Date;\n    dateTo?: Date;\n    limit?: number;\n    offset?: number;\n  } = {}\n): Promise<any[]> => {\n  const {\n    quizQuestionId,\n    isCorrect,\n    dateFrom,\n    dateTo,\n    limit = 20,\n    offset = 0,\n  } = options;\n\n  let whereClause = eq(quizAttempts.userId, userId);\n\n  if (quizQuestionId) {\n    whereClause = and(\n      whereClause,\n      eq(quizAttempts.quizQuestionId, quizQuestionId)\n    );\n  }\n\n  if (isCorrect !== undefined) {\n    whereClause = and(whereClause, eq(quizAttempts.isCorrect, isCorrect));\n  }\n\n  if (dateFrom) {\n    whereClause = and(\n      whereClause,\n      sql`${quizAttempts.attemptedAt} >= ${dateFrom}`\n    );\n  }\n\n  if (dateTo) {\n    whereClause = and(\n      whereClause,\n      sql`${quizAttempts.attemptedAt} <= ${dateTo}`\n    );\n  }\n\n  const result = await db\n    .select()\n    .from(quizAttempts)\n    .where(whereClause)\n    .orderBy(desc(quizAttempts.attemptedAt))\n    .limit(limit)\n    .offset(offset);\n\n  return result;\n};\n\n/**\n * Get quiz attempts for a question\n */\nexport const getQuizAttemptsByQuestion = async (\n  quizQuestionId: string,\n  options: {\n    userId?: string;\n    limit?: number;\n    offset?: number;\n  } = {}\n): Promise<any[]> => {\n  const { userId, limit = 20, offset = 0 } = options;\n\n  let whereClause = eq(quizAttempts.quizQuestionId, quizQuestionId);\n\n  if (userId) {\n    whereClause = and(whereClause, eq(quizAttempts.userId, userId));\n  }\n\n  const result = await db\n    .select()\n    .from(quizAttempts)\n    .where(whereClause)\n    .orderBy(desc(quizAttempts.attemptedAt))\n    .limit(limit)\n    .offset(offset);\n\n  return result;\n};\n\n// =============================================================================\n// QUIZ QUESTION STATISTICS QUERIES\n// =============================================================================\n\n/**\n * Get quiz question statistics\n */\nexport const getQuizQuestionStatistics = async (\n  questionId: string\n): Promise<{\n  totalAttempts: number;\n  correctAttempts: number;\n  incorrectAttempts: number;\n  averageTimeSpent: number;\n  successRate: number;\n  lastAttempted?: Date;\n} | null> => {\n  const question = await getQuizQuestionById(questionId);\n  if (!question) return null;\n\n  const attempts = await getQuizAttemptsByQuestion(questionId);\n\n  const totalAttempts = attempts.length;\n  const correctAttempts = attempts.filter(a => a.isCorrect).length;\n  const incorrectAttempts = totalAttempts - correctAttempts;\n  const averageTimeSpent =\n    totalAttempts > 0\n      ? attempts.reduce((sum, a) => sum + a.timeSpentSeconds, 0) / totalAttempts\n      : 0;\n  const successRate =\n    totalAttempts > 0 ? (correctAttempts / totalAttempts) * 100 : 0;\n  const lastAttempted =\n    attempts.length > 0\n      ? attempts.sort(\n          (a, b) => b.attemptedAt.getTime() - a.attemptedAt.getTime()\n        )[0].attemptedAt\n      : undefined;\n\n  return {\n    totalAttempts,\n    correctAttempts,\n    incorrectAttempts,\n    averageTimeSpent,\n    successRate,\n    lastAttempted,\n  };\n};\n\n/**\n * Get section quiz statistics\n */\nexport const getSectionQuizStatistics = async (\n  sectionId: string\n): Promise<{\n  totalQuestions: number;\n  publishedQuestions: number;\n  totalAttempts: number;\n  averageSuccessRate: number;\n  questionsByType: Record<typeof questionTypeEnum.enumValues[number], number>;\n} | null> => {\n  // Get questions in section\n  const questions = await getQuizQuestionsBySectionId(sectionId, {\n    includeUnpublished: true,\n  });\n\n  if (questions.length === 0) {\n    return {\n      totalQuestions: 0,\n      publishedQuestions: 0,\n      totalAttempts: 0,\n      averageSuccessRate: 0,\n      questionsByType: { \"true-false\": 0, \"multiple-choice\": 0 },\n    };\n  }\n\n  const publishedQuestions = questions.filter(q => q.isPublished).length;\n\n  // Get attempts for all questions\n  const questionIds = questions.map(q => q.id);\n  const attempts = await db\n    .select()\n    .from(quizAttempts)\n    .where(sql`${quizAttempts.quizQuestionId} = any(${questionIds})`);\n\n  const totalAttempts = attempts.length;\n  const correctAttempts = attempts.filter(a => a.isCorrect).length;\n  const averageSuccessRate =\n    totalAttempts > 0 ? (correctAttempts / totalAttempts) * 100 : 0;\n\n  const questionsByType = questions.reduce(\n    (acc, q) => {\n      acc[q.questionType] = (acc[q.questionType] || 0) + 1;\n      return acc;\n    },\n    {} as Record<typeof questionTypeEnum.enumValues[number], number>\n  );\n\n  return {\n    totalQuestions: questions.length,\n    publishedQuestions,\n    totalAttempts,\n    averageSuccessRate,\n    questionsByType,\n  };\n};\n\n// =============================================================================\n// QUIZ QUESTION SEARCH QUERIES\n// =============================================================================\n\n/**\n * Search quiz questions by text\n */\nexport const searchQuizQuestions = async (\n  sectionId: string,\n  searchTerm: string,\n  options: {\n    questionType?: typeof questionTypeEnum.enumValues[number];\n    includeUnpublished?: boolean;\n    limit?: number;\n    offset?: number;\n  } = {}\n): Promise<QuizQuestion[]> => {\n  const {\n    questionType,\n    includeUnpublished = false,\n    limit = 20,\n    offset = 0,\n  } = options;\n\n  let whereClause = and(\n    eq(quizQuestions.sectionId, sectionId),\n    sql`${quizQuestions.questionText} ilike ${`%${searchTerm}%`}`\n  );\n\n  if (questionType) {\n    whereClause = and(\n      whereClause,\n      eq(quizQuestions.questionType, questionType)\n    );\n  }\n\n  if (!includeUnpublished) {\n    whereClause = and(whereClause, eq(quizQuestions.isPublished, true));\n  }\n\n  const result = await db\n    .select()\n    .from(quizQuestions)\n    .where(whereClause)\n    .orderBy(asc(quizQuestions.orderIndex))\n    .limit(limit)\n    .offset(offset);\n\n  return result;\n};\n\n/**\n * Search quiz questions across all sections\n */\nexport const searchAllQuizQuestions = async (\n  searchTerm: string,\n  options: {\n    questionType?: typeof questionTypeEnum.enumValues[number];\n    includeUnpublished?: boolean;\n    limit?: number;\n    offset?: number;\n  } = {}\n): Promise<QuizQuestion[]> => {\n  const {\n    questionType,\n    includeUnpublished = false,\n    limit = 20,\n    offset = 0,\n  } = options;\n\n  let whereClause = sql`${quizQuestions.questionText} ilike ${`%${searchTerm}%`}`;\n\n  if (questionType) {\n    whereClause = and(\n      whereClause,\n      eq(quizQuestions.questionType, questionType)\n    );\n  }\n\n  if (!includeUnpublished) {\n    whereClause = and(whereClause, eq(quizQuestions.isPublished, true));\n  }\n\n  const result = await db\n    .select()\n    .from(quizQuestions)\n    .where(whereClause)\n    .orderBy(asc(quizQuestions.createdAt))\n    .limit(limit)\n    .offset(offset);\n\n  return result;\n};\n\n// =============================================================================\n// QUIZ QUESTION ACCESS CONTROL QUERIES\n// =============================================================================\n\n/**\n * Get quiz questions accessible to user based on role and section access\n */\nexport const getAccessibleQuizQuestions = async (\n  sectionId: string,\n  userRole: string,\n  options: {\n    questionType?: typeof questionTypeEnum.enumValues[number];\n  } = {}\n): Promise<QuizQuestion[]> => {\n  // All roles can access published quiz questions if they have section access\n  // Access control is handled at the section level\n  return getQuizQuestionsBySectionId(sectionId, {\n    ...options,\n    includeUnpublished: userRole === \"safety_admin\",\n  });\n};\n\n/**\n * Check if user can access a specific quiz question\n */\nexport const canUserAccessQuizQuestion = async (\n  questionId: string,\n  userRole: string\n): Promise<boolean> => {\n  const question = await getQuizQuestionById(questionId);\n  if (!question) return false;\n\n  // Safety admins can access all questions\n  if (userRole === \"safety_admin\") return true;\n\n  // Other roles can only access published questions\n  return question.isPublished;\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3035, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/queries/user-progress.ts"],"sourcesContent":["import { eq, and, desc, asc, sql, gte, lte } from \"drizzle-orm\";\nimport { db } from \"../index\";\nimport {\n  userProgress,\n  courses,\n  courseSections,\n  UserProgress,\n  NewUserProgress,\n} from \"../schema\";\n\n/**\n * User Progress Query Operations\n * Handles database queries for user progress tracking with proper access control\n */\n\n// =============================================================================\n// BASIC USER PROGRESS QUERIES\n// =============================================================================\n\n/**\n * Get user progress by ID\n */\nexport const getUserProgressById = async (\n  progressId: string\n): Promise<UserProgress | null> => {\n  const result = await db\n    .select()\n    .from(userProgress)\n    .where(eq(userProgress.id, progressId))\n    .limit(1);\n\n  return result[0] || null;\n};\n\n/**\n * Get user progress by user ID and section ID\n */\nexport const getUserProgressByUserAndSection = async (\n  userId: string,\n  sectionId: string\n): Promise<UserProgress | null> => {\n  const result = await db\n    .select()\n    .from(userProgress)\n    .where(\n      and(\n        eq(userProgress.userId, userId),\n        eq(userProgress.sectionId, sectionId)\n      )\n    )\n    .limit(1);\n\n  return result[0] || null;\n};\n\n/**\n * Get all progress records for a user\n */\nexport const getUserProgressByUser = async (\n  userId: string,\n  options: {\n    courseId?: string;\n    sectionId?: string;\n    isCompleted?: boolean;\n    completionPercentageMin?: number;\n    completionPercentageMax?: number;\n    dateFrom?: Date;\n    dateTo?: Date;\n    sortBy?: \"lastAccessedAt\" | \"completedAt\" | \"createdAt\";\n    sortOrder?: \"asc\" | \"desc\";\n  } = {}\n): Promise<UserProgress[]> => {\n  const {\n    courseId,\n    sectionId,\n    isCompleted,\n    completionPercentageMin,\n    completionPercentageMax,\n    dateFrom,\n    dateTo,\n    sortBy = \"lastAccessedAt\",\n    sortOrder = \"desc\",\n  } = options;\n\n  let whereClause = eq(userProgress.userId, userId);\n\n  if (courseId) {\n    whereClause = and(whereClause, eq(userProgress.courseId, courseId));\n  }\n\n  if (sectionId) {\n    whereClause = and(whereClause, eq(userProgress.sectionId, sectionId));\n  }\n\n  if (isCompleted !== undefined) {\n    whereClause = and(whereClause, eq(userProgress.isCompleted, isCompleted));\n  }\n\n  if (completionPercentageMin !== undefined) {\n    whereClause = and(\n      whereClause,\n      gte(userProgress.completionPercentage, completionPercentageMin)\n    );\n  }\n\n  if (completionPercentageMax !== undefined) {\n    whereClause = and(\n      whereClause,\n      lte(userProgress.completionPercentage, completionPercentageMax)\n    );\n  }\n\n  if (dateFrom) {\n    whereClause = and(whereClause, gte(userProgress.lastAccessedAt, dateFrom));\n  }\n\n  if (dateTo) {\n    whereClause = and(whereClause, lte(userProgress.lastAccessedAt, dateTo));\n  }\n\n  const orderBy =\n    sortOrder === \"desc\"\n      ? desc(userProgress[sortBy])\n      : asc(userProgress[sortBy]);\n\n  const result = await db\n    .select()\n    .from(userProgress)\n    .where(whereClause)\n    .orderBy(orderBy);\n\n  return result;\n};\n\n/**\n * Get all progress records for a course\n */\nexport const getUserProgressByCourse = async (\n  courseId: string,\n  options: {\n    userId?: string;\n    isCompleted?: boolean;\n    limit?: number;\n    offset?: number;\n  } = {}\n): Promise<UserProgress[]> => {\n  const { userId, isCompleted, limit = 20, offset = 0 } = options;\n\n  let whereClause = eq(userProgress.courseId, courseId);\n\n  if (userId) {\n    whereClause = and(whereClause, eq(userProgress.userId, userId));\n  }\n\n  if (isCompleted !== undefined) {\n    whereClause = and(whereClause, eq(userProgress.isCompleted, isCompleted));\n  }\n\n  const result = await db\n    .select()\n    .from(userProgress)\n    .where(whereClause)\n    .orderBy(desc(userProgress.lastAccessedAt))\n    .limit(limit)\n    .offset(offset);\n\n  return result;\n};\n\n/**\n * Get all progress records for a section\n */\nexport const getUserProgressBySection = async (\n  sectionId: string,\n  options: {\n    userId?: string;\n    isCompleted?: boolean;\n    limit?: number;\n    offset?: number;\n  } = {}\n): Promise<UserProgress[]> => {\n  const { userId, isCompleted, limit = 20, offset = 0 } = options;\n\n  let whereClause = eq(userProgress.sectionId, sectionId);\n\n  if (userId) {\n    whereClause = and(whereClause, eq(userProgress.userId, userId));\n  }\n\n  if (isCompleted !== undefined) {\n    whereClause = and(whereClause, eq(userProgress.isCompleted, isCompleted));\n  }\n\n  const result = await db\n    .select()\n    .from(userProgress)\n    .where(whereClause)\n    .orderBy(desc(userProgress.lastAccessedAt))\n    .limit(limit)\n    .offset(offset);\n\n  return result;\n};\n\n// =============================================================================\n// USER PROGRESS CREATION AND UPDATES\n// =============================================================================\n\n/**\n * Create or update user progress\n */\nexport const upsertUserProgress = async (\n  progressData: NewUserProgress\n): Promise<UserProgress> => {\n  const result = await db\n    .insert(userProgress)\n    .values(progressData)\n    .onConflictDoUpdate({\n      target: [userProgress.userId, userProgress.sectionId],\n      set: {\n        isCompleted: progressData.isCompleted,\n        completionPercentage: progressData.completionPercentage,\n        timeSpentSeconds: progressData.timeSpentSeconds,\n        lastAccessedAt: progressData.lastAccessedAt,\n        completedAt: progressData.completedAt,\n        updatedAt: new Date(),\n      },\n    })\n    .returning();\n\n  return result[0];\n};\n\n/**\n * Update user progress\n */\nexport const updateUserProgress = async (\n  progressId: string,\n  updates: Partial<UserProgress>\n): Promise<UserProgress | null> => {\n  const result = await db\n    .update(userProgress)\n    .set({\n      ...updates,\n      updatedAt: new Date(),\n    })\n    .where(eq(userProgress.id, progressId))\n    .returning();\n\n  return result[0] || null;\n};\n\n/**\n * Update user progress by user and section\n */\nexport const updateUserProgressByUserAndSection = async (\n  userId: string,\n  sectionId: string,\n  updates: Partial<UserProgress>\n): Promise<UserProgress | null> => {\n  const result = await db\n    .update(userProgress)\n    .set({\n      ...updates,\n      updatedAt: new Date(),\n    })\n    .where(\n      and(\n        eq(userProgress.userId, userId),\n        eq(userProgress.sectionId, sectionId)\n      )\n    )\n    .returning();\n\n  return result[0] || null;\n};\n\n/**\n * Delete user progress\n */\nexport const deleteUserProgress = async (\n  progressId: string\n): Promise<boolean> => {\n  const result = await db\n    .delete(userProgress)\n    .where(eq(userProgress.id, progressId))\n    .returning();\n\n  return result.length > 0;\n};\n\n// =============================================================================\n// COURSE COMPLETION STATUS QUERIES\n// =============================================================================\n\n/**\n * Calculate course completion status for a user\n */\nexport const calculateCourseCompletionStatus = async (\n  userId: string,\n  courseId: string\n): Promise<{\n  courseId: string;\n  userId: string;\n  totalSections: number;\n  completedSections: number;\n  completionPercentage: number;\n  timeSpentSeconds: number;\n  lastAccessedAt: Date;\n  completedAt?: Date;\n} | null> => {\n  // Get all sections for the course\n  const sections = await db\n    .select()\n    .from(courseSections)\n    .where(eq(courseSections.courseId, courseId));\n\n  if (sections.length === 0) return null;\n\n  // Get user progress for this course\n  const progressRecords = await getUserProgressByUser(userId, { courseId });\n\n  const completedSections = progressRecords.filter(p => p.isCompleted).length;\n  const completionPercentage = Math.round(\n    (completedSections / sections.length) * 100\n  );\n  const timeSpentSeconds = progressRecords.reduce(\n    (sum, p) => sum + p.timeSpentSeconds,\n    0\n  );\n\n  const lastAccessedAt =\n    progressRecords.length > 0\n      ? progressRecords.reduce(\n          (latest, p) =>\n            p.lastAccessedAt > latest ? p.lastAccessedAt : latest,\n          progressRecords[0].lastAccessedAt\n        )\n      : new Date();\n\n  const completedAt =\n    completedSections === sections.length && sections.length > 0\n      ? progressRecords.reduce(\n          (latest, p) =>\n            p.completedAt && p.completedAt > latest ? p.completedAt : latest,\n          progressRecords[0].completedAt || new Date(0)\n        )\n      : undefined;\n\n  return {\n    courseId,\n    userId,\n    totalSections: sections.length,\n    completedSections,\n    completionPercentage,\n    timeSpentSeconds,\n    lastAccessedAt,\n    completedAt:\n      completedAt && completedAt.getTime() > 0 ? completedAt : undefined,\n  };\n};\n\n/**\n * Get course completion status for multiple users\n */\nexport const getCourseCompletionStatusForUsers = async (\n  courseId: string,\n  userIds: string[]\n): Promise<\n  Array<{\n    userId: string;\n    courseId: string;\n    totalSections: number;\n    completedSections: number;\n    completionPercentage: number;\n    timeSpentSeconds: number;\n    lastAccessedAt: Date;\n    completedAt?: Date;\n  }>\n> => {\n  const results = [];\n\n  for (const userId of userIds) {\n    const status = await calculateCourseCompletionStatus(userId, courseId);\n    if (status) {\n      results.push(status);\n    }\n  }\n\n  return results;\n};\n\n// =============================================================================\n// USER PROGRESS ANALYTICS QUERIES\n// =============================================================================\n\n/**\n * Get user progress analytics\n */\nexport const getUserProgressAnalytics = async (\n  userId: string\n): Promise<{\n  userId: string;\n  totalCourses: number;\n  completedCourses: number;\n  inProgressCourses: number;\n  totalTimeSpent: number;\n  averageCompletionRate: number;\n  lastActivity?: Date;\n  coursesByStatus: {\n    completed: string[];\n    inProgress: string[];\n    notStarted: string[];\n  };\n} | null> => {\n  // Get all courses\n  const allCourses = await db\n    .select()\n    .from(courses)\n    .where(eq(courses.isPublished, true));\n\n  if (allCourses.length === 0) {\n    return {\n      userId,\n      totalCourses: 0,\n      completedCourses: 0,\n      inProgressCourses: 0,\n      totalTimeSpent: 0,\n      averageCompletionRate: 0,\n      coursesByStatus: {\n        completed: [],\n        inProgress: [],\n        notStarted: [],\n      },\n    };\n  }\n\n  // Get user progress for all courses\n  const userProgressRecords = await getUserProgressByUser(userId);\n\n  const totalCourses = allCourses.length;\n  let completedCourses = 0;\n  let inProgressCourses = 0;\n  const totalTimeSpent = userProgressRecords.reduce(\n    (sum, p) => sum + p.timeSpentSeconds,\n    0\n  );\n\n  const coursesByStatus = {\n    completed: [] as string[],\n    inProgress: [] as string[],\n    notStarted: [] as string[],\n  };\n\n  // Analyze each course\n  for (const course of allCourses) {\n    const courseProgress = userProgressRecords.filter(\n      p => p.courseId === course.id\n    );\n    const completedSections = courseProgress.filter(p => p.isCompleted).length;\n    const totalSections = courseProgress.length;\n\n    if (totalSections === 0) {\n      coursesByStatus.notStarted.push(course.id);\n    } else if (completedSections === totalSections && totalSections > 0) {\n      completedCourses++;\n      coursesByStatus.completed.push(course.id);\n    } else {\n      inProgressCourses++;\n      coursesByStatus.inProgress.push(course.id);\n    }\n  }\n\n  const averageCompletionRate =\n    totalCourses > 0 ? (completedCourses / totalCourses) * 100 : 0;\n\n  const lastActivity =\n    userProgressRecords.length > 0\n      ? userProgressRecords.reduce(\n          (latest, p) =>\n            p.lastAccessedAt > latest ? p.lastAccessedAt : latest,\n          userProgressRecords[0].lastAccessedAt\n        )\n      : undefined;\n\n  return {\n    userId,\n    totalCourses,\n    completedCourses,\n    inProgressCourses,\n    totalTimeSpent,\n    averageCompletionRate,\n    lastActivity,\n    coursesByStatus,\n  };\n};\n\n// =============================================================================\n// USER PROGRESS STATISTICS QUERIES\n// =============================================================================\n\n/**\n * Get course progress statistics\n */\nexport const getCourseProgressStatistics = async (\n  courseId: string\n): Promise<{\n  totalUsers: number;\n  completedUsers: number;\n  inProgressUsers: number;\n  averageCompletionRate: number;\n  averageTimeSpent: number;\n  lastActivity?: Date;\n} | null> => {\n  const course = await db\n    .select()\n    .from(courses)\n    .where(eq(courses.id, courseId))\n    .limit(1);\n\n  if (!course[0]) return null;\n\n  // Get all progress records for this course\n  const progressRecords = await getUserProgressByCourse(courseId);\n\n  if (progressRecords.length === 0) {\n    return {\n      totalUsers: 0,\n      completedUsers: 0,\n      inProgressUsers: 0,\n      averageCompletionRate: 0,\n      averageTimeSpent: 0,\n    };\n  }\n\n  // Group by user\n  const userProgressMap = new Map<string, UserProgress[]>();\n  progressRecords.forEach(p => {\n    const existing = userProgressMap.get(p.userId) || [];\n    existing.push(p);\n    userProgressMap.set(p.userId, existing);\n  });\n\n  const totalUsers = userProgressMap.size;\n  let completedUsers = 0;\n  let inProgressUsers = 0;\n  let totalTimeSpent = 0;\n\n  // Get total sections for the course\n  const sections = await db\n    .select()\n    .from(courseSections)\n    .where(eq(courseSections.courseId, courseId));\n\n  const totalSections = sections.length;\n\n  // Analyze each user's progress\n  for (const [userId, userProgress] of userProgressMap) {\n    const completedSections = userProgress.filter(p => p.isCompleted).length;\n    const userTimeSpent = userProgress.reduce(\n      (sum, p) => sum + p.timeSpentSeconds,\n      0\n    );\n    totalTimeSpent += userTimeSpent;\n\n    if (completedSections === totalSections && totalSections > 0) {\n      completedUsers++;\n    } else if (completedSections > 0) {\n      inProgressUsers++;\n    }\n  }\n\n  const averageCompletionRate =\n    totalUsers > 0 ? (completedUsers / totalUsers) * 100 : 0;\n  const averageTimeSpent = totalUsers > 0 ? totalTimeSpent / totalUsers : 0;\n\n  const lastActivity =\n    progressRecords.length > 0\n      ? progressRecords.reduce(\n          (latest, p) =>\n            p.lastAccessedAt > latest ? p.lastAccessedAt : latest,\n          progressRecords[0].lastAccessedAt\n        )\n      : undefined;\n\n  return {\n    totalUsers,\n    completedUsers,\n    inProgressUsers,\n    averageCompletionRate,\n    averageTimeSpent,\n    lastActivity,\n  };\n};\n\n// =============================================================================\n// USER PROGRESS SEARCH QUERIES\n// =============================================================================\n\n/**\n * Search user progress records\n */\nexport const searchUserProgress = async (\n  searchTerm: string,\n  options: {\n    userId?: string;\n    courseId?: string;\n    limit?: number;\n    offset?: number;\n  } = {}\n): Promise<UserProgress[]> => {\n  const { userId, courseId, limit = 20, offset = 0 } = options;\n\n  let whereClause = sql`${userProgress.userId} ilike ${`%${searchTerm}%`}`;\n\n  if (userId) {\n    whereClause = and(whereClause, eq(userProgress.userId, userId));\n  }\n\n  if (courseId) {\n    whereClause = and(whereClause, eq(userProgress.courseId, courseId));\n  }\n\n  const result = await db\n    .select()\n    .from(userProgress)\n    .where(whereClause)\n    .orderBy(desc(userProgress.lastAccessedAt))\n    .limit(limit)\n    .offset(offset);\n\n  return result;\n};\n\n// =============================================================================\n// USER PROGRESS ACCESS CONTROL QUERIES\n// =============================================================================\n\n/**\n * Get user progress accessible to user based on role and ownership\n */\nexport const getAccessibleUserProgress = async (\n  userId: string,\n  userRole: string,\n  options: {\n    courseId?: string;\n    sectionId?: string;\n  } = {}\n): Promise<UserProgress[]> => {\n  // Users can always access their own progress\n  if (userRole === \"employee\" || userRole === \"hr_admin\") {\n    return getUserProgressByUser(userId, options);\n  }\n\n  // Safety admins can access all progress\n  if (userRole === \"safety_admin\") {\n    return getUserProgressByUser(userId, options);\n  }\n\n  // Plant managers can access progress in their plant\n  if (userRole === \"plant_manager\") {\n    return getUserProgressByUser(userId, options);\n  }\n\n  // Default: users can only access their own progress\n  return getUserProgressByUser(userId, options);\n};\n\n/**\n * Check if user can access a specific progress record\n */\nexport const canUserAccessProgress = async (\n  progressId: string,\n  userId: string,\n  userRole: string\n): Promise<boolean> => {\n  const progress = await getUserProgressById(progressId);\n  if (!progress) return false;\n\n  // Users can always access their own progress\n  if (progress.userId === userId) return true;\n\n  // Safety admins can access all progress\n  if (userRole === \"safety_admin\") return true;\n\n  // Plant managers can access progress in their plant\n  if (userRole === \"plant_manager\") return true;\n\n  // HR admins can view progress in their plant\n  if (userRole === \"hr_admin\") return true;\n\n  return false;\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3362, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/queries/translations.ts"],"sourcesContent":["import { eq, and } from \"drizzle-orm\";\r\nimport { db } from \"../index\";\r\nimport {\r\n  courseTranslations,\r\n  sectionTranslations,\r\n  contentBlockTranslations,\r\n  quizQuestionTranslations,\r\n  CourseTranslation,\r\n  SectionTranslation,\r\n  ContentBlockTranslation,\r\n  QuizQuestionTranslation,\r\n  NewCourseTranslation,\r\n  NewSectionTranslation,\r\n  NewContentBlockTranslation,\r\n  NewQuizQuestionTranslation,\r\n} from \"../schema\";\r\n\r\n/**\r\n * Translation Query Operations\r\n * Handles database queries for course, section, content block, and quiz translations\r\n */\r\n\r\ntype LanguageCode = \"en\" | \"es\" | \"fr\" | \"de\";\r\n\r\n// =============================================================================\r\n// COURSE TRANSLATIONS\r\n// =============================================================================\r\n\r\n/**\r\n * Get course translation by course ID and language code\r\n */\r\nexport const getCourseTranslation = async (\r\n  courseId: string,\r\n  languageCode: LanguageCode\r\n): Promise<CourseTranslation | null> => {\r\n  const result = await db\r\n    .select()\r\n    .from(courseTranslations)\r\n    .where(\r\n      and(\r\n        eq(courseTranslations.courseId, courseId),\r\n        eq(courseTranslations.languageCode, languageCode)\r\n      )\r\n    )\r\n    .limit(1);\r\n\r\n  return result[0] || null;\r\n};\r\n\r\n/**\r\n * Get all translations for a course\r\n */\r\nexport const getCourseTranslations = async (\r\n  courseId: string\r\n): Promise<CourseTranslation[]> => {\r\n  const result = await db\r\n    .select()\r\n    .from(courseTranslations)\r\n    .where(eq(courseTranslations.courseId, courseId));\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Get available languages for a course\r\n */\r\nexport const getAvailableCourseLanguages = async (\r\n  courseId: string\r\n): Promise<LanguageCode[]> => {\r\n  const result = await db\r\n    .select({ languageCode: courseTranslations.languageCode })\r\n    .from(courseTranslations)\r\n    .where(eq(courseTranslations.courseId, courseId));\r\n\r\n  return result.map((r) => r.languageCode as LanguageCode);\r\n};\r\n\r\n/**\r\n * Create course translation\r\n */\r\nexport const createCourseTranslation = async (\r\n  translationData: NewCourseTranslation\r\n): Promise<CourseTranslation> => {\r\n  const result = await db\r\n    .insert(courseTranslations)\r\n    .values(translationData)\r\n    .returning();\r\n\r\n  return result[0];\r\n};\r\n\r\n/**\r\n * Update course translation\r\n */\r\nexport const updateCourseTranslation = async (\r\n  courseId: string,\r\n  languageCode: LanguageCode,\r\n  updates: Partial<Omit<CourseTranslation, \"id\" | \"courseId\" | \"languageCode\" | \"createdAt\">>\r\n): Promise<CourseTranslation | null> => {\r\n  const result = await db\r\n    .update(courseTranslations)\r\n    .set({\r\n      ...updates,\r\n      updatedAt: new Date(),\r\n    })\r\n    .where(\r\n      and(\r\n        eq(courseTranslations.courseId, courseId),\r\n        eq(courseTranslations.languageCode, languageCode)\r\n      )\r\n    )\r\n    .returning();\r\n\r\n  return result[0] || null;\r\n};\r\n\r\n/**\r\n * Delete course translation\r\n */\r\nexport const deleteCourseTranslation = async (\r\n  courseId: string,\r\n  languageCode: LanguageCode\r\n): Promise<boolean> => {\r\n  const result = await db\r\n    .delete(courseTranslations)\r\n    .where(\r\n      and(\r\n        eq(courseTranslations.courseId, courseId),\r\n        eq(courseTranslations.languageCode, languageCode)\r\n      )\r\n    )\r\n    .returning();\r\n\r\n  return result.length > 0;\r\n};\r\n\r\n// =============================================================================\r\n// SECTION TRANSLATIONS\r\n// =============================================================================\r\n\r\n/**\r\n * Get section translation by section ID and language code\r\n */\r\nexport const getSectionTranslation = async (\r\n  sectionId: string,\r\n  languageCode: LanguageCode\r\n): Promise<SectionTranslation | null> => {\r\n  const result = await db\r\n    .select()\r\n    .from(sectionTranslations)\r\n    .where(\r\n      and(\r\n        eq(sectionTranslations.sectionId, sectionId),\r\n        eq(sectionTranslations.languageCode, languageCode)\r\n      )\r\n    )\r\n    .limit(1);\r\n\r\n  return result[0] || null;\r\n};\r\n\r\n/**\r\n * Get all translations for a section\r\n */\r\nexport const getSectionTranslations = async (\r\n  sectionId: string\r\n): Promise<SectionTranslation[]> => {\r\n  const result = await db\r\n    .select()\r\n    .from(sectionTranslations)\r\n    .where(eq(sectionTranslations.sectionId, sectionId));\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Get section translations for multiple sections\r\n */\r\nexport const getSectionTranslationsByIds = async (\r\n  sectionIds: string[],\r\n  languageCode: LanguageCode\r\n): Promise<SectionTranslation[]> => {\r\n  if (sectionIds.length === 0) return [];\r\n\r\n  const result = await db\r\n    .select()\r\n    .from(sectionTranslations)\r\n    .where(\r\n      and(\r\n        eq(sectionTranslations.languageCode, languageCode),\r\n        eq(sectionTranslations.sectionId, sectionIds[0])\r\n      )\r\n    );\r\n\r\n  // Note: For multiple IDs, you'd use IN clause\r\n  return result;\r\n};\r\n\r\n/**\r\n * Create section translation\r\n */\r\nexport const createSectionTranslation = async (\r\n  translationData: NewSectionTranslation\r\n): Promise<SectionTranslation> => {\r\n  const result = await db\r\n    .insert(sectionTranslations)\r\n    .values(translationData)\r\n    .returning();\r\n\r\n  return result[0];\r\n};\r\n\r\n/**\r\n * Update section translation\r\n */\r\nexport const updateSectionTranslation = async (\r\n  sectionId: string,\r\n  languageCode: LanguageCode,\r\n  updates: Partial<Omit<SectionTranslation, \"id\" | \"sectionId\" | \"languageCode\" | \"createdAt\">>\r\n): Promise<SectionTranslation | null> => {\r\n  const result = await db\r\n    .update(sectionTranslations)\r\n    .set({\r\n      ...updates,\r\n      updatedAt: new Date(),\r\n    })\r\n    .where(\r\n      and(\r\n        eq(sectionTranslations.sectionId, sectionId),\r\n        eq(sectionTranslations.languageCode, languageCode)\r\n      )\r\n    )\r\n    .returning();\r\n\r\n  return result[0] || null;\r\n};\r\n\r\n// =============================================================================\r\n// CONTENT BLOCK TRANSLATIONS\r\n// =============================================================================\r\n\r\n/**\r\n * Get content block translation by block ID and language code\r\n */\r\nexport const getContentBlockTranslation = async (\r\n  contentBlockId: string,\r\n  languageCode: LanguageCode\r\n): Promise<ContentBlockTranslation | null> => {\r\n  const result = await db\r\n    .select()\r\n    .from(contentBlockTranslations)\r\n    .where(\r\n      and(\r\n        eq(contentBlockTranslations.contentBlockId, contentBlockId),\r\n        eq(contentBlockTranslations.languageCode, languageCode)\r\n      )\r\n    )\r\n    .limit(1);\r\n\r\n  return result[0] || null;\r\n};\r\n\r\n/**\r\n * Get all translations for a content block\r\n */\r\nexport const getContentBlockTranslations = async (\r\n  contentBlockId: string\r\n): Promise<ContentBlockTranslation[]> => {\r\n  const result = await db\r\n    .select()\r\n    .from(contentBlockTranslations)\r\n    .where(eq(contentBlockTranslations.contentBlockId, contentBlockId));\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Get content block translations for multiple blocks\r\n */\r\nexport const getContentBlockTranslationsByIds = async (\r\n  contentBlockIds: string[],\r\n  languageCode: LanguageCode\r\n): Promise<Record<string, ContentBlockTranslation>> => {\r\n  if (contentBlockIds.length === 0) return {};\r\n\r\n  const result = await db\r\n    .select()\r\n    .from(contentBlockTranslations)\r\n    .where(eq(contentBlockTranslations.languageCode, languageCode));\r\n\r\n  // Build a map of content block ID to translation\r\n  return result.reduce(\r\n    (acc, translation) => {\r\n      acc[translation.contentBlockId] = translation;\r\n      return acc;\r\n    },\r\n    {} as Record<string, ContentBlockTranslation>\r\n  );\r\n};\r\n\r\n/**\r\n * Create content block translation\r\n */\r\nexport const createContentBlockTranslation = async (\r\n  translationData: NewContentBlockTranslation\r\n): Promise<ContentBlockTranslation> => {\r\n  const result = await db\r\n    .insert(contentBlockTranslations)\r\n    .values(translationData)\r\n    .returning();\r\n\r\n  return result[0];\r\n};\r\n\r\n/**\r\n * Update content block translation\r\n */\r\nexport const updateContentBlockTranslation = async (\r\n  contentBlockId: string,\r\n  languageCode: LanguageCode,\r\n  updates: Partial<Omit<ContentBlockTranslation, \"id\" | \"contentBlockId\" | \"languageCode\" | \"createdAt\">>\r\n): Promise<ContentBlockTranslation | null> => {\r\n  const result = await db\r\n    .update(contentBlockTranslations)\r\n    .set({\r\n      ...updates,\r\n      updatedAt: new Date(),\r\n    })\r\n    .where(\r\n      and(\r\n        eq(contentBlockTranslations.contentBlockId, contentBlockId),\r\n        eq(contentBlockTranslations.languageCode, languageCode)\r\n      )\r\n    )\r\n    .returning();\r\n\r\n  return result[0] || null;\r\n};\r\n\r\n// =============================================================================\r\n// QUIZ QUESTION TRANSLATIONS\r\n// =============================================================================\r\n\r\n/**\r\n * Get quiz question translation by question ID and language code\r\n */\r\nexport const getQuizQuestionTranslation = async (\r\n  quizQuestionId: string,\r\n  languageCode: LanguageCode\r\n): Promise<QuizQuestionTranslation | null> => {\r\n  const result = await db\r\n    .select()\r\n    .from(quizQuestionTranslations)\r\n    .where(\r\n      and(\r\n        eq(quizQuestionTranslations.quizQuestionId, quizQuestionId),\r\n        eq(quizQuestionTranslations.languageCode, languageCode)\r\n      )\r\n    )\r\n    .limit(1);\r\n\r\n  return result[0] || null;\r\n};\r\n\r\n/**\r\n * Get all translations for a quiz question\r\n */\r\nexport const getQuizQuestionTranslations = async (\r\n  quizQuestionId: string\r\n): Promise<QuizQuestionTranslation[]> => {\r\n  const result = await db\r\n    .select()\r\n    .from(quizQuestionTranslations)\r\n    .where(eq(quizQuestionTranslations.quizQuestionId, quizQuestionId));\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Get quiz question translations for multiple questions\r\n */\r\nexport const getQuizQuestionTranslationsByIds = async (\r\n  quizQuestionIds: string[],\r\n  languageCode: LanguageCode\r\n): Promise<Record<string, QuizQuestionTranslation>> => {\r\n  if (quizQuestionIds.length === 0) return {};\r\n\r\n  const result = await db\r\n    .select()\r\n    .from(quizQuestionTranslations)\r\n    .where(eq(quizQuestionTranslations.languageCode, languageCode));\r\n\r\n  // Build a map of quiz question ID to translation\r\n  return result.reduce(\r\n    (acc, translation) => {\r\n      acc[translation.quizQuestionId] = translation;\r\n      return acc;\r\n    },\r\n    {} as Record<string, QuizQuestionTranslation>\r\n  );\r\n};\r\n\r\n/**\r\n * Create quiz question translation\r\n */\r\nexport const createQuizQuestionTranslation = async (\r\n  translationData: NewQuizQuestionTranslation\r\n): Promise<QuizQuestionTranslation> => {\r\n  const result = await db\r\n    .insert(quizQuestionTranslations)\r\n    .values(translationData)\r\n    .returning();\r\n\r\n  return result[0];\r\n};\r\n\r\n/**\r\n * Update quiz question translation\r\n */\r\nexport const updateQuizQuestionTranslation = async (\r\n  quizQuestionId: string,\r\n  languageCode: LanguageCode,\r\n  updates: Partial<Omit<QuizQuestionTranslation, \"id\" | \"quizQuestionId\" | \"languageCode\" | \"createdAt\">>\r\n): Promise<QuizQuestionTranslation | null> => {\r\n  const result = await db\r\n    .update(quizQuestionTranslations)\r\n    .set({\r\n      ...updates,\r\n      updatedAt: new Date(),\r\n    })\r\n    .where(\r\n      and(\r\n        eq(quizQuestionTranslations.quizQuestionId, quizQuestionId),\r\n        eq(quizQuestionTranslations.languageCode, languageCode)\r\n      )\r\n    )\r\n    .returning();\r\n\r\n  return result[0] || null;\r\n};\r\n\r\n// =============================================================================\r\n// BULK TRANSLATION OPERATIONS\r\n// =============================================================================\r\n\r\n/**\r\n * Bulk create course translations\r\n */\r\nexport const bulkCreateCourseTranslations = async (\r\n  translationsData: NewCourseTranslation[]\r\n): Promise<CourseTranslation[]> => {\r\n  const result = await db\r\n    .insert(courseTranslations)\r\n    .values(translationsData)\r\n    .returning();\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Bulk create section translations\r\n */\r\nexport const bulkCreateSectionTranslations = async (\r\n  translationsData: NewSectionTranslation[]\r\n): Promise<SectionTranslation[]> => {\r\n  const result = await db\r\n    .insert(sectionTranslations)\r\n    .values(translationsData)\r\n    .returning();\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Bulk create content block translations\r\n */\r\nexport const bulkCreateContentBlockTranslations = async (\r\n  translationsData: NewContentBlockTranslation[]\r\n): Promise<ContentBlockTranslation[]> => {\r\n  const result = await db\r\n    .insert(contentBlockTranslations)\r\n    .values(translationsData)\r\n    .returning();\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Bulk create quiz question translations\r\n */\r\nexport const bulkCreateQuizQuestionTranslations = async (\r\n  translationsData: NewQuizQuestionTranslation[]\r\n): Promise<QuizQuestionTranslation[]> => {\r\n  const result = await db\r\n    .insert(quizQuestionTranslations)\r\n    .values(translationsData)\r\n    .returning();\r\n\r\n  return result;\r\n};\r\n\r\n// =============================================================================\r\n// TRANSLATION UTILITY FUNCTIONS\r\n// =============================================================================\r\n\r\n/**\r\n * Check if a course has translations available\r\n */\r\nexport const courseHasTranslations = async (\r\n  courseId: string\r\n): Promise<boolean> => {\r\n  const result = await db\r\n    .select({ id: courseTranslations.id })\r\n    .from(courseTranslations)\r\n    .where(eq(courseTranslations.courseId, courseId))\r\n    .limit(1);\r\n\r\n  return result.length > 0;\r\n};\r\n\r\n/**\r\n * Get translation completion status for a course\r\n */\r\nexport const getCourseTranslationStatus = async (\r\n  courseId: string,\r\n  languageCode: LanguageCode\r\n): Promise<{\r\n  hasCourseTranslation: boolean;\r\n  sectionTranslationsCount: number;\r\n  contentBlockTranslationsCount: number;\r\n  quizQuestionTranslationsCount: number;\r\n}> => {\r\n  // Check course translation\r\n  const courseTranslation = await getCourseTranslation(courseId, languageCode);\r\n\r\n  // Get section IDs for this course\r\n  const { courseSections } = await import(\"../schema\");\r\n  const sections = await db\r\n    .select({ id: courseSections.id })\r\n    .from(courseSections)\r\n    .where(eq(courseSections.courseId, courseId));\r\n\r\n  const sectionIds = sections.map((s) => s.id);\r\n\r\n  // Count section translations\r\n  const sectionTranslationsCount = sectionIds.length > 0\r\n    ? (\r\n        await db\r\n          .select()\r\n          .from(sectionTranslations)\r\n          .where(eq(sectionTranslations.languageCode, languageCode))\r\n      ).filter((st) => sectionIds.includes(st.sectionId)).length\r\n    : 0;\r\n\r\n  // This is a simplified version - for full implementation, you'd need to\r\n  // query content blocks and quiz questions through the sections\r\n  return {\r\n    hasCourseTranslation: !!courseTranslation,\r\n    sectionTranslationsCount,\r\n    contentBlockTranslationsCount: 0, // Would need to implement\r\n    quizQuestionTranslationsCount: 0, // Would need to implement\r\n  };\r\n};\r\n\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;;;;AA6BO,MAAM,uBAAuB,OAClC,UACA;IAEA,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,GACN,IAAI,CAAC,qMAAkB,EACvB,KAAK,CACJ,IAAA,+PAAG,EACD,IAAA,8PAAE,EAAC,qMAAkB,CAAC,QAAQ,EAAE,WAChC,IAAA,8PAAE,EAAC,qMAAkB,CAAC,YAAY,EAAE,gBAGvC,KAAK,CAAC;IAET,OAAO,MAAM,CAAC,EAAE,IAAI;AACtB;AAKO,MAAM,wBAAwB,OACnC;IAEA,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,GACN,IAAI,CAAC,qMAAkB,EACvB,KAAK,CAAC,IAAA,8PAAE,EAAC,qMAAkB,CAAC,QAAQ,EAAE;IAEzC,OAAO;AACT;AAKO,MAAM,8BAA8B,OACzC;IAEA,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,CAAC;QAAE,cAAc,qMAAkB,CAAC,YAAY;IAAC,GACvD,IAAI,CAAC,qMAAkB,EACvB,KAAK,CAAC,IAAA,8PAAE,EAAC,qMAAkB,CAAC,QAAQ,EAAE;IAEzC,OAAO,OAAO,GAAG,CAAC,CAAC,IAAM,EAAE,YAAY;AACzC;AAKO,MAAM,0BAA0B,OACrC;IAEA,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,CAAC,qMAAkB,EACzB,MAAM,CAAC,iBACP,SAAS;IAEZ,OAAO,MAAM,CAAC,EAAE;AAClB;AAKO,MAAM,0BAA0B,OACrC,UACA,cACA;IAEA,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,CAAC,qMAAkB,EACzB,GAAG,CAAC;QACH,GAAG,OAAO;QACV,WAAW,IAAI;IACjB,GACC,KAAK,CACJ,IAAA,+PAAG,EACD,IAAA,8PAAE,EAAC,qMAAkB,CAAC,QAAQ,EAAE,WAChC,IAAA,8PAAE,EAAC,qMAAkB,CAAC,YAAY,EAAE,gBAGvC,SAAS;IAEZ,OAAO,MAAM,CAAC,EAAE,IAAI;AACtB;AAKO,MAAM,0BAA0B,OACrC,UACA;IAEA,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,CAAC,qMAAkB,EACzB,KAAK,CACJ,IAAA,+PAAG,EACD,IAAA,8PAAE,EAAC,qMAAkB,CAAC,QAAQ,EAAE,WAChC,IAAA,8PAAE,EAAC,qMAAkB,CAAC,YAAY,EAAE,gBAGvC,SAAS;IAEZ,OAAO,OAAO,MAAM,GAAG;AACzB;AASO,MAAM,wBAAwB,OACnC,WACA;IAEA,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,GACN,IAAI,CAAC,uMAAmB,EACxB,KAAK,CACJ,IAAA,+PAAG,EACD,IAAA,8PAAE,EAAC,uMAAmB,CAAC,SAAS,EAAE,YAClC,IAAA,8PAAE,EAAC,uMAAmB,CAAC,YAAY,EAAE,gBAGxC,KAAK,CAAC;IAET,OAAO,MAAM,CAAC,EAAE,IAAI;AACtB;AAKO,MAAM,yBAAyB,OACpC;IAEA,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,GACN,IAAI,CAAC,uMAAmB,EACxB,KAAK,CAAC,IAAA,8PAAE,EAAC,uMAAmB,CAAC,SAAS,EAAE;IAE3C,OAAO;AACT;AAKO,MAAM,8BAA8B,OACzC,YACA;IAEA,IAAI,WAAW,MAAM,KAAK,GAAG,OAAO,EAAE;IAEtC,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,GACN,IAAI,CAAC,uMAAmB,EACxB,KAAK,CACJ,IAAA,+PAAG,EACD,IAAA,8PAAE,EAAC,uMAAmB,CAAC,YAAY,EAAE,eACrC,IAAA,8PAAE,EAAC,uMAAmB,CAAC,SAAS,EAAE,UAAU,CAAC,EAAE;IAIrD,8CAA8C;IAC9C,OAAO;AACT;AAKO,MAAM,2BAA2B,OACtC;IAEA,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,CAAC,uMAAmB,EAC1B,MAAM,CAAC,iBACP,SAAS;IAEZ,OAAO,MAAM,CAAC,EAAE;AAClB;AAKO,MAAM,2BAA2B,OACtC,WACA,cACA;IAEA,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,CAAC,uMAAmB,EAC1B,GAAG,CAAC;QACH,GAAG,OAAO;QACV,WAAW,IAAI;IACjB,GACC,KAAK,CACJ,IAAA,+PAAG,EACD,IAAA,8PAAE,EAAC,uMAAmB,CAAC,SAAS,EAAE,YAClC,IAAA,8PAAE,EAAC,uMAAmB,CAAC,YAAY,EAAE,gBAGxC,SAAS;IAEZ,OAAO,MAAM,CAAC,EAAE,IAAI;AACtB;AASO,MAAM,6BAA6B,OACxC,gBACA;IAEA,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,GACN,IAAI,CAAC,qNAAwB,EAC7B,KAAK,CACJ,IAAA,+PAAG,EACD,IAAA,8PAAE,EAAC,qNAAwB,CAAC,cAAc,EAAE,iBAC5C,IAAA,8PAAE,EAAC,qNAAwB,CAAC,YAAY,EAAE,gBAG7C,KAAK,CAAC;IAET,OAAO,MAAM,CAAC,EAAE,IAAI;AACtB;AAKO,MAAM,8BAA8B,OACzC;IAEA,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,GACN,IAAI,CAAC,qNAAwB,EAC7B,KAAK,CAAC,IAAA,8PAAE,EAAC,qNAAwB,CAAC,cAAc,EAAE;IAErD,OAAO;AACT;AAKO,MAAM,mCAAmC,OAC9C,iBACA;IAEA,IAAI,gBAAgB,MAAM,KAAK,GAAG,OAAO,CAAC;IAE1C,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,GACN,IAAI,CAAC,qNAAwB,EAC7B,KAAK,CAAC,IAAA,8PAAE,EAAC,qNAAwB,CAAC,YAAY,EAAE;IAEnD,iDAAiD;IACjD,OAAO,OAAO,MAAM,CAClB,CAAC,KAAK;QACJ,GAAG,CAAC,YAAY,cAAc,CAAC,GAAG;QAClC,OAAO;IACT,GACA,CAAC;AAEL;AAKO,MAAM,gCAAgC,OAC3C;IAEA,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,CAAC,qNAAwB,EAC/B,MAAM,CAAC,iBACP,SAAS;IAEZ,OAAO,MAAM,CAAC,EAAE;AAClB;AAKO,MAAM,gCAAgC,OAC3C,gBACA,cACA;IAEA,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,CAAC,qNAAwB,EAC/B,GAAG,CAAC;QACH,GAAG,OAAO;QACV,WAAW,IAAI;IACjB,GACC,KAAK,CACJ,IAAA,+PAAG,EACD,IAAA,8PAAE,EAAC,qNAAwB,CAAC,cAAc,EAAE,iBAC5C,IAAA,8PAAE,EAAC,qNAAwB,CAAC,YAAY,EAAE,gBAG7C,SAAS;IAEZ,OAAO,MAAM,CAAC,EAAE,IAAI;AACtB;AASO,MAAM,6BAA6B,OACxC,gBACA;IAEA,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,GACN,IAAI,CAAC,qNAAwB,EAC7B,KAAK,CACJ,IAAA,+PAAG,EACD,IAAA,8PAAE,EAAC,qNAAwB,CAAC,cAAc,EAAE,iBAC5C,IAAA,8PAAE,EAAC,qNAAwB,CAAC,YAAY,EAAE,gBAG7C,KAAK,CAAC;IAET,OAAO,MAAM,CAAC,EAAE,IAAI;AACtB;AAKO,MAAM,8BAA8B,OACzC;IAEA,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,GACN,IAAI,CAAC,qNAAwB,EAC7B,KAAK,CAAC,IAAA,8PAAE,EAAC,qNAAwB,CAAC,cAAc,EAAE;IAErD,OAAO;AACT;AAKO,MAAM,mCAAmC,OAC9C,iBACA;IAEA,IAAI,gBAAgB,MAAM,KAAK,GAAG,OAAO,CAAC;IAE1C,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,GACN,IAAI,CAAC,qNAAwB,EAC7B,KAAK,CAAC,IAAA,8PAAE,EAAC,qNAAwB,CAAC,YAAY,EAAE;IAEnD,iDAAiD;IACjD,OAAO,OAAO,MAAM,CAClB,CAAC,KAAK;QACJ,GAAG,CAAC,YAAY,cAAc,CAAC,GAAG;QAClC,OAAO;IACT,GACA,CAAC;AAEL;AAKO,MAAM,gCAAgC,OAC3C;IAEA,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,CAAC,qNAAwB,EAC/B,MAAM,CAAC,iBACP,SAAS;IAEZ,OAAO,MAAM,CAAC,EAAE;AAClB;AAKO,MAAM,gCAAgC,OAC3C,gBACA,cACA;IAEA,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,CAAC,qNAAwB,EAC/B,GAAG,CAAC;QACH,GAAG,OAAO;QACV,WAAW,IAAI;IACjB,GACC,KAAK,CACJ,IAAA,+PAAG,EACD,IAAA,8PAAE,EAAC,qNAAwB,CAAC,cAAc,EAAE,iBAC5C,IAAA,8PAAE,EAAC,qNAAwB,CAAC,YAAY,EAAE,gBAG7C,SAAS;IAEZ,OAAO,MAAM,CAAC,EAAE,IAAI;AACtB;AASO,MAAM,+BAA+B,OAC1C;IAEA,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,CAAC,qMAAkB,EACzB,MAAM,CAAC,kBACP,SAAS;IAEZ,OAAO;AACT;AAKO,MAAM,gCAAgC,OAC3C;IAEA,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,CAAC,uMAAmB,EAC1B,MAAM,CAAC,kBACP,SAAS;IAEZ,OAAO;AACT;AAKO,MAAM,qCAAqC,OAChD;IAEA,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,CAAC,qNAAwB,EAC/B,MAAM,CAAC,kBACP,SAAS;IAEZ,OAAO;AACT;AAKO,MAAM,qCAAqC,OAChD;IAEA,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,CAAC,qNAAwB,EAC/B,MAAM,CAAC,kBACP,SAAS;IAEZ,OAAO;AACT;AASO,MAAM,wBAAwB,OACnC;IAEA,MAAM,SAAS,MAAM,0KAAE,CACpB,MAAM,CAAC;QAAE,IAAI,qMAAkB,CAAC,EAAE;IAAC,GACnC,IAAI,CAAC,qMAAkB,EACvB,KAAK,CAAC,IAAA,8PAAE,EAAC,qMAAkB,CAAC,QAAQ,EAAE,WACtC,KAAK,CAAC;IAET,OAAO,OAAO,MAAM,GAAG;AACzB;AAKO,MAAM,6BAA6B,OACxC,UACA;IAOA,2BAA2B;IAC3B,MAAM,oBAAoB,MAAM,qBAAqB,UAAU;IAE/D,kCAAkC;IAClC,MAAM,EAAE,cAAc,EAAE,GAAG;IAC3B,MAAM,WAAW,MAAM,0KAAE,CACtB,MAAM,CAAC;QAAE,IAAI,eAAe,EAAE;IAAC,GAC/B,IAAI,CAAC,gBACL,KAAK,CAAC,IAAA,8PAAE,EAAC,eAAe,QAAQ,EAAE;IAErC,MAAM,aAAa,SAAS,GAAG,CAAC,CAAC,IAAM,EAAE,EAAE;IAE3C,6BAA6B;IAC7B,MAAM,2BAA2B,WAAW,MAAM,GAAG,IACjD,CACE,MAAM,0KAAE,CACL,MAAM,GACN,IAAI,CAAC,uMAAmB,EACxB,KAAK,CAAC,IAAA,8PAAE,EAAC,uMAAmB,CAAC,YAAY,EAAE,cAChD,EAAE,MAAM,CAAC,CAAC,KAAO,WAAW,QAAQ,CAAC,GAAG,SAAS,GAAG,MAAM,GAC1D;IAEJ,wEAAwE;IACxE,+DAA+D;IAC/D,OAAO;QACL,sBAAsB,CAAC,CAAC;QACxB;QACA,+BAA+B;QAC/B,+BAA+B;IACjC;AACF","debugId":null}},
    {"offset": {"line": 3584, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/lib/db/queries/index.ts"],"sourcesContent":["// LMS Content Query Operations\n// Centralized query system for structured course content, sections, blocks, and quizzes\n\n// Course section queries\nexport * from \"./course-sections\";\n\n// Content block queries\nexport * from \"./content-blocks\";\n\n// Quiz question queries\nexport * from \"./quiz-questions\";\n\n// User progress queries\nexport * from \"./user-progress\";\n\n// Translation queries\nexport * from \"./translations\";\n"],"names":[],"mappings":"AAAA,+BAA+B;AAC/B,wFAAwF;AAExF,yBAAyB;;AACzB;AAEA,wBAAwB;AACxB;AAEA,wBAAwB;AACxB;AAEA,wBAAwB;AACxB;AAEA,sBAAsB;AACtB","debugId":null}},
    {"offset": {"line": 3606, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jshepherd/OneDrive%20-%20SpecChem%2C%20LLC/Desktop/specchem-safety-lms-v2-main/apps/safety-lms/src/app/api/translations/%5BcourseId%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { serverAuth } from \"@/lib/supabase/server\";\r\nimport {\r\n  getCourseTranslation,\r\n  getAvailableCourseLanguages,\r\n} from \"@/lib/db/queries\";\r\n\r\n/**\r\n * GET /api/translations/[courseId]\r\n * Get available translations for a course\r\n */\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: { courseId: string } }\r\n) {\r\n  try {\r\n    const { user } = await serverAuth.getCurrentUser();\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { success: false, error: \"Unauthorized\" },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const { courseId } = params;\r\n    const { searchParams } = new URL(request.url);\r\n    const language = searchParams.get(\"language\") as \"en\" | \"es\" | \"fr\" | \"de\" | null;\r\n\r\n    // If specific language requested\r\n    if (language) {\r\n      const translation = await getCourseTranslation(courseId, language);\r\n      \r\n      if (!translation) {\r\n        return NextResponse.json(\r\n          { success: false, error: \"Translation not found\" },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        data: translation,\r\n      });\r\n    }\r\n\r\n    // Otherwise, return available languages\r\n    const availableLanguages = await getAvailableCourseLanguages(courseId);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        availableLanguages,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error fetching course translations:\", error);\r\n    return NextResponse.json(\r\n      { success: false, error: \"Internal server error\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AAAA;;;;AASO,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAAoC;IAE5C,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,yKAAU,CAAC,cAAc;QAEhD,IAAI,CAAC,MAAM;YACT,OAAO,+QAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAAe,GACxC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,EAAE,QAAQ,EAAE,GAAG;QACrB,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,WAAW,aAAa,GAAG,CAAC;QAElC,iCAAiC;QACjC,IAAI,UAAU;YACZ,MAAM,cAAc,MAAM,IAAA,8LAAoB,EAAC,UAAU;YAEzD,IAAI,CAAC,aAAa;gBAChB,OAAO,+QAAY,CAAC,IAAI,CACtB;oBAAE,SAAS;oBAAO,OAAO;gBAAwB,GACjD;oBAAE,QAAQ;gBAAI;YAElB;YAEA,OAAO,+QAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,MAAM;YACR;QACF;QAEA,wCAAwC;QACxC,MAAM,qBAAqB,MAAM,IAAA,qMAA2B,EAAC;QAE7D,OAAO,+QAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;gBACJ;YACF;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uCAAuC;QACrD,OAAO,+QAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAAwB,GACjD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}